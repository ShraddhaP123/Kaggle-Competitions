2023-08-03 16:37:54,017:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-03 16:37:54,017:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-03 16:37:54,017:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-03 16:37:54,020:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-03 16:37:56,001:INFO:PyCaret RegressionExperiment
2023-08-03 16:37:56,001:INFO:Logging name: reg-default-name
2023-08-03 16:37:56,001:INFO:ML Usecase: MLUsecase.REGRESSION
2023-08-03 16:37:56,001:INFO:version 3.0.4
2023-08-03 16:37:56,001:INFO:Initializing setup()
2023-08-03 16:37:56,001:INFO:self.USI: bfd3
2023-08-03 16:37:56,001:INFO:self._variable_keys: {'fold_shuffle_param', 'data', 'memory', 'gpu_n_jobs_param', '_available_plots', 'n_jobs_param', 'y_train', '_ml_usecase', 'logging_param', 'y', 'fold_generator', 'transform_target_param', 'X_train', 'pipeline', 'X', 'USI', 'X_test', 'gpu_param', 'fold_groups_param', 'log_plots_param', 'exp_name_log', 'y_test', 'exp_id', 'idx', 'seed', 'target_param', 'html_param'}
2023-08-03 16:37:56,001:INFO:Checking environment
2023-08-03 16:37:56,001:INFO:python_version: 3.9.13
2023-08-03 16:37:56,001:INFO:python_build: ('main', 'Aug 25 2022 23:51:50')
2023-08-03 16:37:56,001:INFO:machine: AMD64
2023-08-03 16:37:56,001:INFO:platform: Windows-10-10.0.22621-SP0
2023-08-03 16:37:56,001:INFO:Memory: svmem(total=34014814208, available=18702094336, percent=45.0, used=15312719872, free=18702094336)
2023-08-03 16:37:56,001:INFO:Physical Core: 14
2023-08-03 16:37:56,001:INFO:Logical Core: 20
2023-08-03 16:37:56,001:INFO:Checking libraries
2023-08-03 16:37:56,001:INFO:System:
2023-08-03 16:37:56,001:INFO:    python: 3.9.13 (main, Aug 25 2022, 23:51:50) [MSC v.1916 64 bit (AMD64)]
2023-08-03 16:37:56,001:INFO:executable: C:\ProgramData\Anaconda3\python.exe
2023-08-03 16:37:56,001:INFO:   machine: Windows-10-10.0.22621-SP0
2023-08-03 16:37:56,001:INFO:PyCaret required dependencies:
2023-08-03 16:37:56,314:INFO:                 pip: 22.2.2
2023-08-03 16:37:56,314:INFO:          setuptools: 63.4.1
2023-08-03 16:37:56,314:INFO:             pycaret: 3.0.4
2023-08-03 16:37:56,314:INFO:             IPython: 7.31.1
2023-08-03 16:37:56,314:INFO:          ipywidgets: 7.6.5
2023-08-03 16:37:56,314:INFO:                tqdm: 4.64.1
2023-08-03 16:37:56,314:INFO:               numpy: 1.21.5
2023-08-03 16:37:56,314:INFO:              pandas: 1.4.4
2023-08-03 16:37:56,314:INFO:              jinja2: 2.11.3
2023-08-03 16:37:56,314:INFO:               scipy: 1.9.1
2023-08-03 16:37:56,314:INFO:              joblib: 1.1.0
2023-08-03 16:37:56,314:INFO:             sklearn: 1.0.2
2023-08-03 16:37:56,314:INFO:                pyod: 1.1.0
2023-08-03 16:37:56,314:INFO:            imblearn: 0.11.0
2023-08-03 16:37:56,314:INFO:   category_encoders: 2.6.1
2023-08-03 16:37:56,314:INFO:            lightgbm: 4.0.0
2023-08-03 16:37:56,314:INFO:               numba: 0.55.1
2023-08-03 16:37:56,314:INFO:            requests: 2.28.1
2023-08-03 16:37:56,314:INFO:          matplotlib: 3.5.2
2023-08-03 16:37:56,314:INFO:          scikitplot: 0.3.7
2023-08-03 16:37:56,314:INFO:         yellowbrick: 1.5
2023-08-03 16:37:56,314:INFO:              plotly: 5.9.0
2023-08-03 16:37:56,314:INFO:    plotly-resampler: Not installed
2023-08-03 16:37:56,314:INFO:             kaleido: 0.2.1
2023-08-03 16:37:56,314:INFO:           schemdraw: 0.15
2023-08-03 16:37:56,314:INFO:         statsmodels: 0.13.2
2023-08-03 16:37:56,314:INFO:              sktime: 0.21.0
2023-08-03 16:37:56,314:INFO:               tbats: 1.1.3
2023-08-03 16:37:56,314:INFO:            pmdarima: 2.0.3
2023-08-03 16:37:56,314:INFO:              psutil: 5.9.0
2023-08-03 16:37:56,314:INFO:          markupsafe: 2.0.1
2023-08-03 16:37:56,314:INFO:             pickle5: Not installed
2023-08-03 16:37:56,314:INFO:         cloudpickle: 2.0.0
2023-08-03 16:37:56,314:INFO:         deprecation: 2.1.0
2023-08-03 16:37:56,314:INFO:              xxhash: 3.2.0
2023-08-03 16:37:56,314:INFO:           wurlitzer: Not installed
2023-08-03 16:37:56,314:INFO:PyCaret optional dependencies:
2023-08-03 16:37:56,339:INFO:                shap: Not installed
2023-08-03 16:37:56,339:INFO:           interpret: Not installed
2023-08-03 16:37:56,339:INFO:                umap: Not installed
2023-08-03 16:37:56,339:INFO:    pandas_profiling: Not installed
2023-08-03 16:37:56,339:INFO:  explainerdashboard: Not installed
2023-08-03 16:37:56,339:INFO:             autoviz: Not installed
2023-08-03 16:37:56,339:INFO:           fairlearn: Not installed
2023-08-03 16:37:56,339:INFO:          deepchecks: Not installed
2023-08-03 16:37:56,339:INFO:             xgboost: 1.7.6
2023-08-03 16:37:56,339:INFO:            catboost: Not installed
2023-08-03 16:37:56,339:INFO:              kmodes: Not installed
2023-08-03 16:37:56,339:INFO:             mlxtend: Not installed
2023-08-03 16:37:56,339:INFO:       statsforecast: Not installed
2023-08-03 16:37:56,347:INFO:        tune_sklearn: Not installed
2023-08-03 16:37:56,347:INFO:                 ray: Not installed
2023-08-03 16:37:56,347:INFO:            hyperopt: Not installed
2023-08-03 16:37:56,347:INFO:              optuna: Not installed
2023-08-03 16:37:56,347:INFO:               skopt: Not installed
2023-08-03 16:37:56,347:INFO:              mlflow: Not installed
2023-08-03 16:37:56,347:INFO:              gradio: Not installed
2023-08-03 16:37:56,347:INFO:             fastapi: Not installed
2023-08-03 16:37:56,347:INFO:             uvicorn: Not installed
2023-08-03 16:37:56,347:INFO:              m2cgen: Not installed
2023-08-03 16:37:56,347:INFO:           evidently: Not installed
2023-08-03 16:37:56,347:INFO:               fugue: Not installed
2023-08-03 16:37:56,347:INFO:           streamlit: Not installed
2023-08-03 16:37:56,347:INFO:             prophet: Not installed
2023-08-03 16:37:56,347:INFO:None
2023-08-03 16:37:56,347:INFO:Set up data.
2023-08-03 16:41:20,250:INFO:PyCaret RegressionExperiment
2023-08-03 16:41:20,250:INFO:Logging name: reg-default-name
2023-08-03 16:41:20,250:INFO:ML Usecase: MLUsecase.REGRESSION
2023-08-03 16:41:20,250:INFO:version 3.0.4
2023-08-03 16:41:20,250:INFO:Initializing setup()
2023-08-03 16:41:20,250:INFO:self.USI: 7170
2023-08-03 16:41:20,250:INFO:self._variable_keys: {'fold_shuffle_param', 'data', 'memory', 'gpu_n_jobs_param', '_available_plots', 'n_jobs_param', 'y_train', '_ml_usecase', 'logging_param', 'y', 'fold_generator', 'transform_target_param', 'X_train', 'pipeline', 'X', 'USI', 'X_test', 'gpu_param', 'fold_groups_param', 'log_plots_param', 'exp_name_log', 'y_test', 'exp_id', 'idx', 'seed', 'target_param', 'html_param'}
2023-08-03 16:41:20,250:INFO:Checking environment
2023-08-03 16:41:20,250:INFO:python_version: 3.9.13
2023-08-03 16:41:20,250:INFO:python_build: ('main', 'Aug 25 2022 23:51:50')
2023-08-03 16:41:20,250:INFO:machine: AMD64
2023-08-03 16:41:20,250:INFO:platform: Windows-10-10.0.22621-SP0
2023-08-03 16:41:20,250:INFO:Memory: svmem(total=34014814208, available=18782367744, percent=44.8, used=15232446464, free=18782367744)
2023-08-03 16:41:20,250:INFO:Physical Core: 14
2023-08-03 16:41:20,258:INFO:Logical Core: 20
2023-08-03 16:41:20,258:INFO:Checking libraries
2023-08-03 16:41:20,258:INFO:System:
2023-08-03 16:41:20,258:INFO:    python: 3.9.13 (main, Aug 25 2022, 23:51:50) [MSC v.1916 64 bit (AMD64)]
2023-08-03 16:41:20,258:INFO:executable: C:\ProgramData\Anaconda3\python.exe
2023-08-03 16:41:20,258:INFO:   machine: Windows-10-10.0.22621-SP0
2023-08-03 16:41:20,258:INFO:PyCaret required dependencies:
2023-08-03 16:41:20,258:INFO:                 pip: 22.2.2
2023-08-03 16:41:20,258:INFO:          setuptools: 63.4.1
2023-08-03 16:41:20,258:INFO:             pycaret: 3.0.4
2023-08-03 16:41:20,258:INFO:             IPython: 7.31.1
2023-08-03 16:41:20,258:INFO:          ipywidgets: 7.6.5
2023-08-03 16:41:20,258:INFO:                tqdm: 4.64.1
2023-08-03 16:41:20,258:INFO:               numpy: 1.21.5
2023-08-03 16:41:20,258:INFO:              pandas: 1.4.4
2023-08-03 16:41:20,258:INFO:              jinja2: 2.11.3
2023-08-03 16:41:20,258:INFO:               scipy: 1.9.1
2023-08-03 16:41:20,258:INFO:              joblib: 1.1.0
2023-08-03 16:41:20,258:INFO:             sklearn: 1.0.2
2023-08-03 16:41:20,258:INFO:                pyod: 1.1.0
2023-08-03 16:41:20,258:INFO:            imblearn: 0.11.0
2023-08-03 16:41:20,258:INFO:   category_encoders: 2.6.1
2023-08-03 16:41:20,258:INFO:            lightgbm: 4.0.0
2023-08-03 16:41:20,258:INFO:               numba: 0.55.1
2023-08-03 16:41:20,258:INFO:            requests: 2.28.1
2023-08-03 16:41:20,258:INFO:          matplotlib: 3.5.2
2023-08-03 16:41:20,258:INFO:          scikitplot: 0.3.7
2023-08-03 16:41:20,258:INFO:         yellowbrick: 1.5
2023-08-03 16:41:20,258:INFO:              plotly: 5.9.0
2023-08-03 16:41:20,258:INFO:    plotly-resampler: Not installed
2023-08-03 16:41:20,258:INFO:             kaleido: 0.2.1
2023-08-03 16:41:20,258:INFO:           schemdraw: 0.15
2023-08-03 16:41:20,258:INFO:         statsmodels: 0.13.2
2023-08-03 16:41:20,258:INFO:              sktime: 0.21.0
2023-08-03 16:41:20,258:INFO:               tbats: 1.1.3
2023-08-03 16:41:20,258:INFO:            pmdarima: 2.0.3
2023-08-03 16:41:20,258:INFO:              psutil: 5.9.0
2023-08-03 16:41:20,258:INFO:          markupsafe: 2.0.1
2023-08-03 16:41:20,258:INFO:             pickle5: Not installed
2023-08-03 16:41:20,258:INFO:         cloudpickle: 2.0.0
2023-08-03 16:41:20,258:INFO:         deprecation: 2.1.0
2023-08-03 16:41:20,258:INFO:              xxhash: 3.2.0
2023-08-03 16:41:20,258:INFO:           wurlitzer: Not installed
2023-08-03 16:41:20,258:INFO:PyCaret optional dependencies:
2023-08-03 16:41:20,258:INFO:                shap: Not installed
2023-08-03 16:41:20,258:INFO:           interpret: Not installed
2023-08-03 16:41:20,258:INFO:                umap: Not installed
2023-08-03 16:41:20,258:INFO:    pandas_profiling: Not installed
2023-08-03 16:41:20,258:INFO:  explainerdashboard: Not installed
2023-08-03 16:41:20,258:INFO:             autoviz: Not installed
2023-08-03 16:41:20,258:INFO:           fairlearn: Not installed
2023-08-03 16:41:20,258:INFO:          deepchecks: Not installed
2023-08-03 16:41:20,258:INFO:             xgboost: 1.7.6
2023-08-03 16:41:20,258:INFO:            catboost: Not installed
2023-08-03 16:41:20,258:INFO:              kmodes: Not installed
2023-08-03 16:41:20,258:INFO:             mlxtend: Not installed
2023-08-03 16:41:20,258:INFO:       statsforecast: Not installed
2023-08-03 16:41:20,258:INFO:        tune_sklearn: Not installed
2023-08-03 16:41:20,258:INFO:                 ray: Not installed
2023-08-03 16:41:20,258:INFO:            hyperopt: Not installed
2023-08-03 16:41:20,258:INFO:              optuna: Not installed
2023-08-03 16:41:20,258:INFO:               skopt: Not installed
2023-08-03 16:41:20,258:INFO:              mlflow: Not installed
2023-08-03 16:41:20,258:INFO:              gradio: Not installed
2023-08-03 16:41:20,258:INFO:             fastapi: Not installed
2023-08-03 16:41:20,258:INFO:             uvicorn: Not installed
2023-08-03 16:41:20,258:INFO:              m2cgen: Not installed
2023-08-03 16:41:20,258:INFO:           evidently: Not installed
2023-08-03 16:41:20,258:INFO:               fugue: Not installed
2023-08-03 16:41:20,258:INFO:           streamlit: Not installed
2023-08-03 16:41:20,258:INFO:             prophet: Not installed
2023-08-03 16:41:20,258:INFO:None
2023-08-03 16:41:20,258:INFO:Set up data.
2023-08-03 16:41:52,848:INFO:PyCaret RegressionExperiment
2023-08-03 16:41:52,848:INFO:Logging name: reg-default-name
2023-08-03 16:41:52,848:INFO:ML Usecase: MLUsecase.REGRESSION
2023-08-03 16:41:52,848:INFO:version 3.0.4
2023-08-03 16:41:52,848:INFO:Initializing setup()
2023-08-03 16:41:52,848:INFO:self.USI: 0a4a
2023-08-03 16:41:52,848:INFO:self._variable_keys: {'fold_shuffle_param', 'data', 'memory', 'gpu_n_jobs_param', '_available_plots', 'n_jobs_param', 'y_train', '_ml_usecase', 'logging_param', 'y', 'fold_generator', 'transform_target_param', 'X_train', 'pipeline', 'X', 'USI', 'X_test', 'gpu_param', 'fold_groups_param', 'log_plots_param', 'exp_name_log', 'y_test', 'exp_id', 'idx', 'seed', 'target_param', 'html_param'}
2023-08-03 16:41:52,848:INFO:Checking environment
2023-08-03 16:41:52,848:INFO:python_version: 3.9.13
2023-08-03 16:41:52,848:INFO:python_build: ('main', 'Aug 25 2022 23:51:50')
2023-08-03 16:41:52,848:INFO:machine: AMD64
2023-08-03 16:41:52,848:INFO:platform: Windows-10-10.0.22621-SP0
2023-08-03 16:41:52,848:INFO:Memory: svmem(total=34014814208, available=18791854080, percent=44.8, used=15222960128, free=18791854080)
2023-08-03 16:41:52,853:INFO:Physical Core: 14
2023-08-03 16:41:52,858:INFO:Logical Core: 20
2023-08-03 16:41:52,862:INFO:Checking libraries
2023-08-03 16:41:52,862:INFO:System:
2023-08-03 16:41:52,862:INFO:    python: 3.9.13 (main, Aug 25 2022, 23:51:50) [MSC v.1916 64 bit (AMD64)]
2023-08-03 16:41:52,862:INFO:executable: C:\ProgramData\Anaconda3\python.exe
2023-08-03 16:41:52,862:INFO:   machine: Windows-10-10.0.22621-SP0
2023-08-03 16:41:52,862:INFO:PyCaret required dependencies:
2023-08-03 16:41:52,862:INFO:                 pip: 22.2.2
2023-08-03 16:41:52,862:INFO:          setuptools: 63.4.1
2023-08-03 16:41:52,862:INFO:             pycaret: 3.0.4
2023-08-03 16:41:52,862:INFO:             IPython: 7.31.1
2023-08-03 16:41:52,862:INFO:          ipywidgets: 7.6.5
2023-08-03 16:41:52,862:INFO:                tqdm: 4.64.1
2023-08-03 16:41:52,862:INFO:               numpy: 1.21.5
2023-08-03 16:41:52,862:INFO:              pandas: 1.4.4
2023-08-03 16:41:52,862:INFO:              jinja2: 2.11.3
2023-08-03 16:41:52,862:INFO:               scipy: 1.9.1
2023-08-03 16:41:52,862:INFO:              joblib: 1.1.0
2023-08-03 16:41:52,862:INFO:             sklearn: 1.0.2
2023-08-03 16:41:52,862:INFO:                pyod: 1.1.0
2023-08-03 16:41:52,862:INFO:            imblearn: 0.11.0
2023-08-03 16:41:52,862:INFO:   category_encoders: 2.6.1
2023-08-03 16:41:52,862:INFO:            lightgbm: 4.0.0
2023-08-03 16:41:52,862:INFO:               numba: 0.55.1
2023-08-03 16:41:52,864:INFO:            requests: 2.28.1
2023-08-03 16:41:52,864:INFO:          matplotlib: 3.5.2
2023-08-03 16:41:52,864:INFO:          scikitplot: 0.3.7
2023-08-03 16:41:52,864:INFO:         yellowbrick: 1.5
2023-08-03 16:41:52,864:INFO:              plotly: 5.9.0
2023-08-03 16:41:52,864:INFO:    plotly-resampler: Not installed
2023-08-03 16:41:52,864:INFO:             kaleido: 0.2.1
2023-08-03 16:41:52,864:INFO:           schemdraw: 0.15
2023-08-03 16:41:52,864:INFO:         statsmodels: 0.13.2
2023-08-03 16:41:52,864:INFO:              sktime: 0.21.0
2023-08-03 16:41:52,864:INFO:               tbats: 1.1.3
2023-08-03 16:41:52,864:INFO:            pmdarima: 2.0.3
2023-08-03 16:41:52,864:INFO:              psutil: 5.9.0
2023-08-03 16:41:52,864:INFO:          markupsafe: 2.0.1
2023-08-03 16:41:52,864:INFO:             pickle5: Not installed
2023-08-03 16:41:52,864:INFO:         cloudpickle: 2.0.0
2023-08-03 16:41:52,864:INFO:         deprecation: 2.1.0
2023-08-03 16:41:52,864:INFO:              xxhash: 3.2.0
2023-08-03 16:41:52,864:INFO:           wurlitzer: Not installed
2023-08-03 16:41:52,864:INFO:PyCaret optional dependencies:
2023-08-03 16:41:52,864:INFO:                shap: Not installed
2023-08-03 16:41:52,864:INFO:           interpret: Not installed
2023-08-03 16:41:52,864:INFO:                umap: Not installed
2023-08-03 16:41:52,864:INFO:    pandas_profiling: Not installed
2023-08-03 16:41:52,864:INFO:  explainerdashboard: Not installed
2023-08-03 16:41:52,864:INFO:             autoviz: Not installed
2023-08-03 16:41:52,864:INFO:           fairlearn: Not installed
2023-08-03 16:41:52,864:INFO:          deepchecks: Not installed
2023-08-03 16:41:52,864:INFO:             xgboost: 1.7.6
2023-08-03 16:41:52,864:INFO:            catboost: Not installed
2023-08-03 16:41:52,864:INFO:              kmodes: Not installed
2023-08-03 16:41:52,864:INFO:             mlxtend: Not installed
2023-08-03 16:41:52,864:INFO:       statsforecast: Not installed
2023-08-03 16:41:52,864:INFO:        tune_sklearn: Not installed
2023-08-03 16:41:52,864:INFO:                 ray: Not installed
2023-08-03 16:41:52,864:INFO:            hyperopt: Not installed
2023-08-03 16:41:52,864:INFO:              optuna: Not installed
2023-08-03 16:41:52,864:INFO:               skopt: Not installed
2023-08-03 16:41:52,864:INFO:              mlflow: Not installed
2023-08-03 16:41:52,864:INFO:              gradio: Not installed
2023-08-03 16:41:52,864:INFO:             fastapi: Not installed
2023-08-03 16:41:52,864:INFO:             uvicorn: Not installed
2023-08-03 16:41:52,864:INFO:              m2cgen: Not installed
2023-08-03 16:41:52,864:INFO:           evidently: Not installed
2023-08-03 16:41:52,864:INFO:               fugue: Not installed
2023-08-03 16:41:52,864:INFO:           streamlit: Not installed
2023-08-03 16:41:52,864:INFO:             prophet: Not installed
2023-08-03 16:41:52,864:INFO:None
2023-08-03 16:41:52,864:INFO:Set up data.
2023-08-03 16:46:06,362:INFO:PyCaret RegressionExperiment
2023-08-03 16:46:06,362:INFO:Logging name: reg-default-name
2023-08-03 16:46:06,362:INFO:ML Usecase: MLUsecase.REGRESSION
2023-08-03 16:46:06,362:INFO:version 3.0.4
2023-08-03 16:46:06,362:INFO:Initializing setup()
2023-08-03 16:46:06,362:INFO:self.USI: 9a92
2023-08-03 16:46:06,362:INFO:self._variable_keys: {'fold_shuffle_param', 'data', 'memory', 'gpu_n_jobs_param', '_available_plots', 'n_jobs_param', 'y_train', '_ml_usecase', 'logging_param', 'y', 'fold_generator', 'transform_target_param', 'X_train', 'pipeline', 'X', 'USI', 'X_test', 'gpu_param', 'fold_groups_param', 'log_plots_param', 'exp_name_log', 'y_test', 'exp_id', 'idx', 'seed', 'target_param', 'html_param'}
2023-08-03 16:46:06,362:INFO:Checking environment
2023-08-03 16:46:06,362:INFO:python_version: 3.9.13
2023-08-03 16:46:06,362:INFO:python_build: ('main', 'Aug 25 2022 23:51:50')
2023-08-03 16:46:06,362:INFO:machine: AMD64
2023-08-03 16:46:06,362:INFO:platform: Windows-10-10.0.22621-SP0
2023-08-03 16:46:06,362:INFO:Memory: svmem(total=34014814208, available=18579947520, percent=45.4, used=15434866688, free=18579947520)
2023-08-03 16:46:06,362:INFO:Physical Core: 14
2023-08-03 16:46:06,366:INFO:Logical Core: 20
2023-08-03 16:46:06,366:INFO:Checking libraries
2023-08-03 16:46:06,366:INFO:System:
2023-08-03 16:46:06,366:INFO:    python: 3.9.13 (main, Aug 25 2022, 23:51:50) [MSC v.1916 64 bit (AMD64)]
2023-08-03 16:46:06,366:INFO:executable: C:\ProgramData\Anaconda3\python.exe
2023-08-03 16:46:06,366:INFO:   machine: Windows-10-10.0.22621-SP0
2023-08-03 16:46:06,366:INFO:PyCaret required dependencies:
2023-08-03 16:46:06,366:INFO:                 pip: 22.2.2
2023-08-03 16:46:06,366:INFO:          setuptools: 63.4.1
2023-08-03 16:46:06,366:INFO:             pycaret: 3.0.4
2023-08-03 16:46:06,366:INFO:             IPython: 7.31.1
2023-08-03 16:46:06,366:INFO:          ipywidgets: 7.6.5
2023-08-03 16:46:06,366:INFO:                tqdm: 4.64.1
2023-08-03 16:46:06,366:INFO:               numpy: 1.21.5
2023-08-03 16:46:06,366:INFO:              pandas: 1.4.4
2023-08-03 16:46:06,366:INFO:              jinja2: 2.11.3
2023-08-03 16:46:06,366:INFO:               scipy: 1.9.1
2023-08-03 16:46:06,366:INFO:              joblib: 1.1.0
2023-08-03 16:46:06,366:INFO:             sklearn: 1.0.2
2023-08-03 16:46:06,366:INFO:                pyod: 1.1.0
2023-08-03 16:46:06,366:INFO:            imblearn: 0.11.0
2023-08-03 16:46:06,366:INFO:   category_encoders: 2.6.1
2023-08-03 16:46:06,366:INFO:            lightgbm: 4.0.0
2023-08-03 16:46:06,366:INFO:               numba: 0.55.1
2023-08-03 16:46:06,366:INFO:            requests: 2.28.1
2023-08-03 16:46:06,366:INFO:          matplotlib: 3.5.2
2023-08-03 16:46:06,366:INFO:          scikitplot: 0.3.7
2023-08-03 16:46:06,366:INFO:         yellowbrick: 1.5
2023-08-03 16:46:06,366:INFO:              plotly: 5.9.0
2023-08-03 16:46:06,366:INFO:    plotly-resampler: Not installed
2023-08-03 16:46:06,366:INFO:             kaleido: 0.2.1
2023-08-03 16:46:06,366:INFO:           schemdraw: 0.15
2023-08-03 16:46:06,366:INFO:         statsmodels: 0.13.2
2023-08-03 16:46:06,366:INFO:              sktime: 0.21.0
2023-08-03 16:46:06,366:INFO:               tbats: 1.1.3
2023-08-03 16:46:06,366:INFO:            pmdarima: 2.0.3
2023-08-03 16:46:06,366:INFO:              psutil: 5.9.0
2023-08-03 16:46:06,366:INFO:          markupsafe: 2.0.1
2023-08-03 16:46:06,366:INFO:             pickle5: Not installed
2023-08-03 16:46:06,366:INFO:         cloudpickle: 2.0.0
2023-08-03 16:46:06,366:INFO:         deprecation: 2.1.0
2023-08-03 16:46:06,366:INFO:              xxhash: 3.2.0
2023-08-03 16:46:06,366:INFO:           wurlitzer: Not installed
2023-08-03 16:46:06,366:INFO:PyCaret optional dependencies:
2023-08-03 16:46:06,366:INFO:                shap: Not installed
2023-08-03 16:46:06,366:INFO:           interpret: Not installed
2023-08-03 16:46:06,366:INFO:                umap: Not installed
2023-08-03 16:46:06,366:INFO:    pandas_profiling: Not installed
2023-08-03 16:46:06,366:INFO:  explainerdashboard: Not installed
2023-08-03 16:46:06,370:INFO:             autoviz: Not installed
2023-08-03 16:46:06,370:INFO:           fairlearn: Not installed
2023-08-03 16:46:06,370:INFO:          deepchecks: Not installed
2023-08-03 16:46:06,370:INFO:             xgboost: 1.7.6
2023-08-03 16:46:06,370:INFO:            catboost: Not installed
2023-08-03 16:46:06,370:INFO:              kmodes: Not installed
2023-08-03 16:46:06,370:INFO:             mlxtend: Not installed
2023-08-03 16:46:06,370:INFO:       statsforecast: Not installed
2023-08-03 16:46:06,370:INFO:        tune_sklearn: Not installed
2023-08-03 16:46:06,370:INFO:                 ray: Not installed
2023-08-03 16:46:06,370:INFO:            hyperopt: Not installed
2023-08-03 16:46:06,370:INFO:              optuna: Not installed
2023-08-03 16:46:06,370:INFO:               skopt: Not installed
2023-08-03 16:46:06,370:INFO:              mlflow: Not installed
2023-08-03 16:46:06,370:INFO:              gradio: Not installed
2023-08-03 16:46:06,370:INFO:             fastapi: Not installed
2023-08-03 16:46:06,370:INFO:             uvicorn: Not installed
2023-08-03 16:46:06,370:INFO:              m2cgen: Not installed
2023-08-03 16:46:06,370:INFO:           evidently: Not installed
2023-08-03 16:46:06,370:INFO:               fugue: Not installed
2023-08-03 16:46:06,370:INFO:           streamlit: Not installed
2023-08-03 16:46:06,370:INFO:             prophet: Not installed
2023-08-03 16:46:06,370:INFO:None
2023-08-03 16:46:06,370:INFO:Set up data.
2023-08-03 16:47:52,896:INFO:PyCaret RegressionExperiment
2023-08-03 16:47:52,896:INFO:Logging name: reg-default-name
2023-08-03 16:47:52,896:INFO:ML Usecase: MLUsecase.REGRESSION
2023-08-03 16:47:52,896:INFO:version 3.0.4
2023-08-03 16:47:52,896:INFO:Initializing setup()
2023-08-03 16:47:52,896:INFO:self.USI: 4055
2023-08-03 16:47:52,896:INFO:self._variable_keys: {'fold_shuffle_param', 'data', 'memory', 'gpu_n_jobs_param', '_available_plots', 'n_jobs_param', 'y_train', '_ml_usecase', 'logging_param', 'y', 'fold_generator', 'transform_target_param', 'X_train', 'pipeline', 'X', 'USI', 'X_test', 'gpu_param', 'fold_groups_param', 'log_plots_param', 'exp_name_log', 'y_test', 'exp_id', 'idx', 'seed', 'target_param', 'html_param'}
2023-08-03 16:47:52,896:INFO:Checking environment
2023-08-03 16:47:52,896:INFO:python_version: 3.9.13
2023-08-03 16:47:52,896:INFO:python_build: ('main', 'Aug 25 2022 23:51:50')
2023-08-03 16:47:52,896:INFO:machine: AMD64
2023-08-03 16:47:52,896:INFO:platform: Windows-10-10.0.22621-SP0
2023-08-03 16:47:52,904:INFO:Memory: svmem(total=34014814208, available=18525347840, percent=45.5, used=15489466368, free=18525347840)
2023-08-03 16:47:52,904:INFO:Physical Core: 14
2023-08-03 16:47:52,904:INFO:Logical Core: 20
2023-08-03 16:47:52,904:INFO:Checking libraries
2023-08-03 16:47:52,904:INFO:System:
2023-08-03 16:47:52,904:INFO:    python: 3.9.13 (main, Aug 25 2022, 23:51:50) [MSC v.1916 64 bit (AMD64)]
2023-08-03 16:47:52,904:INFO:executable: C:\ProgramData\Anaconda3\python.exe
2023-08-03 16:47:52,904:INFO:   machine: Windows-10-10.0.22621-SP0
2023-08-03 16:47:52,904:INFO:PyCaret required dependencies:
2023-08-03 16:47:52,904:INFO:                 pip: 22.2.2
2023-08-03 16:47:52,904:INFO:          setuptools: 63.4.1
2023-08-03 16:47:52,904:INFO:             pycaret: 3.0.4
2023-08-03 16:47:52,904:INFO:             IPython: 7.31.1
2023-08-03 16:47:52,904:INFO:          ipywidgets: 7.6.5
2023-08-03 16:47:52,904:INFO:                tqdm: 4.64.1
2023-08-03 16:47:52,904:INFO:               numpy: 1.21.5
2023-08-03 16:47:52,904:INFO:              pandas: 1.4.4
2023-08-03 16:47:52,904:INFO:              jinja2: 2.11.3
2023-08-03 16:47:52,904:INFO:               scipy: 1.9.1
2023-08-03 16:47:52,904:INFO:              joblib: 1.1.0
2023-08-03 16:47:52,904:INFO:             sklearn: 1.0.2
2023-08-03 16:47:52,904:INFO:                pyod: 1.1.0
2023-08-03 16:47:52,904:INFO:            imblearn: 0.11.0
2023-08-03 16:47:52,904:INFO:   category_encoders: 2.6.1
2023-08-03 16:47:52,904:INFO:            lightgbm: 4.0.0
2023-08-03 16:47:52,904:INFO:               numba: 0.55.1
2023-08-03 16:47:52,904:INFO:            requests: 2.28.1
2023-08-03 16:47:52,904:INFO:          matplotlib: 3.5.2
2023-08-03 16:47:52,904:INFO:          scikitplot: 0.3.7
2023-08-03 16:47:52,904:INFO:         yellowbrick: 1.5
2023-08-03 16:47:52,904:INFO:              plotly: 5.9.0
2023-08-03 16:47:52,904:INFO:    plotly-resampler: Not installed
2023-08-03 16:47:52,904:INFO:             kaleido: 0.2.1
2023-08-03 16:47:52,904:INFO:           schemdraw: 0.15
2023-08-03 16:47:52,904:INFO:         statsmodels: 0.13.2
2023-08-03 16:47:52,904:INFO:              sktime: 0.21.0
2023-08-03 16:47:52,904:INFO:               tbats: 1.1.3
2023-08-03 16:47:52,904:INFO:            pmdarima: 2.0.3
2023-08-03 16:47:52,904:INFO:              psutil: 5.9.0
2023-08-03 16:47:52,904:INFO:          markupsafe: 2.0.1
2023-08-03 16:47:52,904:INFO:             pickle5: Not installed
2023-08-03 16:47:52,904:INFO:         cloudpickle: 2.0.0
2023-08-03 16:47:52,904:INFO:         deprecation: 2.1.0
2023-08-03 16:47:52,904:INFO:              xxhash: 3.2.0
2023-08-03 16:47:52,904:INFO:           wurlitzer: Not installed
2023-08-03 16:47:52,904:INFO:PyCaret optional dependencies:
2023-08-03 16:47:52,904:INFO:                shap: Not installed
2023-08-03 16:47:52,904:INFO:           interpret: Not installed
2023-08-03 16:47:52,904:INFO:                umap: Not installed
2023-08-03 16:47:52,904:INFO:    pandas_profiling: Not installed
2023-08-03 16:47:52,904:INFO:  explainerdashboard: Not installed
2023-08-03 16:47:52,904:INFO:             autoviz: Not installed
2023-08-03 16:47:52,904:INFO:           fairlearn: Not installed
2023-08-03 16:47:52,904:INFO:          deepchecks: Not installed
2023-08-03 16:47:52,904:INFO:             xgboost: 1.7.6
2023-08-03 16:47:52,904:INFO:            catboost: Not installed
2023-08-03 16:47:52,904:INFO:              kmodes: Not installed
2023-08-03 16:47:52,904:INFO:             mlxtend: Not installed
2023-08-03 16:47:52,904:INFO:       statsforecast: Not installed
2023-08-03 16:47:52,904:INFO:        tune_sklearn: Not installed
2023-08-03 16:47:52,904:INFO:                 ray: Not installed
2023-08-03 16:47:52,904:INFO:            hyperopt: Not installed
2023-08-03 16:47:52,904:INFO:              optuna: Not installed
2023-08-03 16:47:52,904:INFO:               skopt: Not installed
2023-08-03 16:47:52,904:INFO:              mlflow: Not installed
2023-08-03 16:47:52,904:INFO:              gradio: Not installed
2023-08-03 16:47:52,904:INFO:             fastapi: Not installed
2023-08-03 16:47:52,904:INFO:             uvicorn: Not installed
2023-08-03 16:47:52,904:INFO:              m2cgen: Not installed
2023-08-03 16:47:52,904:INFO:           evidently: Not installed
2023-08-03 16:47:52,904:INFO:               fugue: Not installed
2023-08-03 16:47:52,904:INFO:           streamlit: Not installed
2023-08-03 16:47:52,904:INFO:             prophet: Not installed
2023-08-03 16:47:52,904:INFO:None
2023-08-03 16:47:52,904:INFO:Set up data.
2023-08-03 16:50:24,095:INFO:PyCaret RegressionExperiment
2023-08-03 16:50:24,095:INFO:Logging name: reg-default-name
2023-08-03 16:50:24,095:INFO:ML Usecase: MLUsecase.REGRESSION
2023-08-03 16:50:24,095:INFO:version 3.0.4
2023-08-03 16:50:24,095:INFO:Initializing setup()
2023-08-03 16:50:24,095:INFO:self.USI: 056e
2023-08-03 16:50:24,095:INFO:self._variable_keys: {'fold_shuffle_param', 'data', 'memory', 'gpu_n_jobs_param', '_available_plots', 'n_jobs_param', 'y_train', '_ml_usecase', 'logging_param', 'y', 'fold_generator', 'transform_target_param', 'X_train', 'pipeline', 'X', 'USI', 'X_test', 'gpu_param', 'fold_groups_param', 'log_plots_param', 'exp_name_log', 'y_test', 'exp_id', 'idx', 'seed', 'target_param', 'html_param'}
2023-08-03 16:50:24,095:INFO:Checking environment
2023-08-03 16:50:24,095:INFO:python_version: 3.9.13
2023-08-03 16:50:24,095:INFO:python_build: ('main', 'Aug 25 2022 23:51:50')
2023-08-03 16:50:24,095:INFO:machine: AMD64
2023-08-03 16:50:24,095:INFO:platform: Windows-10-10.0.22621-SP0
2023-08-03 16:50:24,095:INFO:Memory: svmem(total=34014814208, available=18520752128, percent=45.6, used=15494062080, free=18520752128)
2023-08-03 16:50:24,095:INFO:Physical Core: 14
2023-08-03 16:50:24,095:INFO:Logical Core: 20
2023-08-03 16:50:24,095:INFO:Checking libraries
2023-08-03 16:50:24,095:INFO:System:
2023-08-03 16:50:24,095:INFO:    python: 3.9.13 (main, Aug 25 2022, 23:51:50) [MSC v.1916 64 bit (AMD64)]
2023-08-03 16:50:24,095:INFO:executable: C:\ProgramData\Anaconda3\python.exe
2023-08-03 16:50:24,095:INFO:   machine: Windows-10-10.0.22621-SP0
2023-08-03 16:50:24,095:INFO:PyCaret required dependencies:
2023-08-03 16:50:24,095:INFO:                 pip: 22.2.2
2023-08-03 16:50:24,095:INFO:          setuptools: 63.4.1
2023-08-03 16:50:24,095:INFO:             pycaret: 3.0.4
2023-08-03 16:50:24,095:INFO:             IPython: 7.31.1
2023-08-03 16:50:24,095:INFO:          ipywidgets: 7.6.5
2023-08-03 16:50:24,095:INFO:                tqdm: 4.64.1
2023-08-03 16:50:24,095:INFO:               numpy: 1.21.5
2023-08-03 16:50:24,095:INFO:              pandas: 1.4.4
2023-08-03 16:50:24,095:INFO:              jinja2: 2.11.3
2023-08-03 16:50:24,095:INFO:               scipy: 1.9.1
2023-08-03 16:50:24,095:INFO:              joblib: 1.1.0
2023-08-03 16:50:24,095:INFO:             sklearn: 1.0.2
2023-08-03 16:50:24,095:INFO:                pyod: 1.1.0
2023-08-03 16:50:24,095:INFO:            imblearn: 0.11.0
2023-08-03 16:50:24,095:INFO:   category_encoders: 2.6.1
2023-08-03 16:50:24,095:INFO:            lightgbm: 4.0.0
2023-08-03 16:50:24,095:INFO:               numba: 0.55.1
2023-08-03 16:50:24,095:INFO:            requests: 2.28.1
2023-08-03 16:50:24,095:INFO:          matplotlib: 3.5.2
2023-08-03 16:50:24,095:INFO:          scikitplot: 0.3.7
2023-08-03 16:50:24,095:INFO:         yellowbrick: 1.5
2023-08-03 16:50:24,095:INFO:              plotly: 5.9.0
2023-08-03 16:50:24,095:INFO:    plotly-resampler: Not installed
2023-08-03 16:50:24,095:INFO:             kaleido: 0.2.1
2023-08-03 16:50:24,095:INFO:           schemdraw: 0.15
2023-08-03 16:50:24,095:INFO:         statsmodels: 0.13.2
2023-08-03 16:50:24,095:INFO:              sktime: 0.21.0
2023-08-03 16:50:24,095:INFO:               tbats: 1.1.3
2023-08-03 16:50:24,095:INFO:            pmdarima: 2.0.3
2023-08-03 16:50:24,095:INFO:              psutil: 5.9.0
2023-08-03 16:50:24,095:INFO:          markupsafe: 2.0.1
2023-08-03 16:50:24,095:INFO:             pickle5: Not installed
2023-08-03 16:50:24,095:INFO:         cloudpickle: 2.0.0
2023-08-03 16:50:24,095:INFO:         deprecation: 2.1.0
2023-08-03 16:50:24,095:INFO:              xxhash: 3.2.0
2023-08-03 16:50:24,095:INFO:           wurlitzer: Not installed
2023-08-03 16:50:24,100:INFO:PyCaret optional dependencies:
2023-08-03 16:50:24,100:INFO:                shap: Not installed
2023-08-03 16:50:24,100:INFO:           interpret: Not installed
2023-08-03 16:50:24,100:INFO:                umap: Not installed
2023-08-03 16:50:24,100:INFO:    pandas_profiling: Not installed
2023-08-03 16:50:24,100:INFO:  explainerdashboard: Not installed
2023-08-03 16:50:24,100:INFO:             autoviz: Not installed
2023-08-03 16:50:24,100:INFO:           fairlearn: Not installed
2023-08-03 16:50:24,100:INFO:          deepchecks: Not installed
2023-08-03 16:50:24,100:INFO:             xgboost: 1.7.6
2023-08-03 16:50:24,100:INFO:            catboost: Not installed
2023-08-03 16:50:24,101:INFO:              kmodes: Not installed
2023-08-03 16:50:24,101:INFO:             mlxtend: Not installed
2023-08-03 16:50:24,101:INFO:       statsforecast: Not installed
2023-08-03 16:50:24,101:INFO:        tune_sklearn: Not installed
2023-08-03 16:50:24,101:INFO:                 ray: Not installed
2023-08-03 16:50:24,101:INFO:            hyperopt: Not installed
2023-08-03 16:50:24,101:INFO:              optuna: Not installed
2023-08-03 16:50:24,101:INFO:               skopt: Not installed
2023-08-03 16:50:24,101:INFO:              mlflow: Not installed
2023-08-03 16:50:24,101:INFO:              gradio: Not installed
2023-08-03 16:50:24,101:INFO:             fastapi: Not installed
2023-08-03 16:50:24,101:INFO:             uvicorn: Not installed
2023-08-03 16:50:24,101:INFO:              m2cgen: Not installed
2023-08-03 16:50:24,101:INFO:           evidently: Not installed
2023-08-03 16:50:24,101:INFO:               fugue: Not installed
2023-08-03 16:50:24,101:INFO:           streamlit: Not installed
2023-08-03 16:50:24,101:INFO:             prophet: Not installed
2023-08-03 16:50:24,101:INFO:None
2023-08-03 16:50:24,101:INFO:Set up data.
2023-08-03 16:50:24,125:INFO:Set up train/test split.
2023-08-03 16:50:24,150:INFO:Set up index.
2023-08-03 16:50:24,150:INFO:Set up folding strategy.
2023-08-03 16:50:24,150:INFO:Assigning column types.
2023-08-03 16:50:24,157:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-08-03 16:50:24,157:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-03 16:50:24,165:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-03 16:50:24,173:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-03 16:50:24,294:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 16:50:24,376:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-03 16:50:24,376:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 16:50:24,409:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 16:50:24,409:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-03 16:50:24,417:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-03 16:50:24,425:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-03 16:50:24,529:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 16:50:24,610:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-03 16:50:24,610:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 16:50:24,610:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 16:50:24,610:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-08-03 16:50:24,618:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-03 16:50:24,626:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-03 16:50:24,731:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 16:50:24,811:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-03 16:50:24,811:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 16:50:24,811:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 16:50:24,827:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-03 16:50:24,827:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-03 16:50:24,937:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 16:50:25,014:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-03 16:50:25,014:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 16:50:25,014:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 16:50:25,014:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-08-03 16:50:25,030:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-03 16:50:25,144:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 16:50:25,216:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-03 16:50:25,216:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 16:50:25,224:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 16:50:25,240:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-03 16:50:25,345:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 16:50:25,426:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-03 16:50:25,426:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 16:50:25,426:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 16:50:25,434:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-08-03 16:50:25,564:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 16:50:25,640:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-03 16:50:25,644:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 16:50:25,652:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 16:50:25,781:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 16:50:25,853:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-03 16:50:25,853:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 16:50:25,861:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 16:50:25,861:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-08-03 16:50:25,975:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 16:50:26,055:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 16:50:26,055:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 16:50:26,175:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 16:50:26,256:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 16:50:26,256:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 16:50:26,264:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-08-03 16:50:26,457:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 16:50:26,457:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 16:50:26,650:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 16:50:26,658:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 16:50:26,675:INFO:Preparing preprocessing pipeline...
2023-08-03 16:50:26,675:INFO:Set up simple imputation.
2023-08-03 16:50:26,716:INFO:Finished creating preprocessing pipeline.
2023-08-03 16:50:26,724:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\patta\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['clonesize', 'honeybee', 'bumbles',
                                             'andrena', 'osmia',
                                             'MaxOfUpperTRange',
                                             'MinOfUpperTRange',
                                             'AverageOfUpperTRange',
                                             'MaxOfLowerTRange',
                                             'MinOfLowerTRange',
                                             'AverageOfLowerTRange',
                                             'RainingDays',
                                             'AverageRainingDays', 'fruitset',
                                             'fruitmass', 'seeds'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-08-03 16:50:26,724:INFO:Creating final display dataframe.
2023-08-03 16:50:26,842:INFO:Setup _display_container:                     Description             Value
0                    Session id              8919
1                        Target             yield
2                   Target type        Regression
3           Original data shape       (15289, 17)
4        Transformed data shape       (15289, 17)
5   Transformed train set shape       (10702, 17)
6    Transformed test set shape        (4587, 17)
7              Numeric features                16
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              056e
2023-08-03 16:50:27,058:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 16:50:27,066:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 16:50:27,260:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 16:50:27,260:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 16:50:27,260:INFO:setup() successfully completed in 3.17s...............
2023-08-03 16:50:33,259:INFO:Initializing compare_models()
2023-08-03 16:50:33,259:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3449A400>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000020A3449A400>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-08-03 16:50:33,259:INFO:Checking exceptions
2023-08-03 16:50:33,267:INFO:Preparing display monitor
2023-08-03 16:50:33,342:INFO:Initializing Linear Regression
2023-08-03 16:50:33,342:INFO:Total runtime is 0.0 minutes
2023-08-03 16:50:33,350:INFO:SubProcess create_model() called ==================================
2023-08-03 16:50:33,350:INFO:Initializing create_model()
2023-08-03 16:50:33,350:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3449A400>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A378EF700>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 16:50:33,350:INFO:Checking exceptions
2023-08-03 16:50:33,350:INFO:Importing libraries
2023-08-03 16:50:33,350:INFO:Copying training dataset
2023-08-03 16:50:33,358:INFO:Defining folds
2023-08-03 16:50:33,358:INFO:Declaring metric variables
2023-08-03 16:50:33,366:INFO:Importing untrained model
2023-08-03 16:50:33,374:INFO:Linear Regression Imported successfully
2023-08-03 16:50:33,390:INFO:Starting cross validation
2023-08-03 16:50:33,414:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 16:50:38,967:INFO:Calculating mean and std
2023-08-03 16:50:38,967:INFO:Creating metrics dataframe
2023-08-03 16:50:38,975:INFO:Uploading results into container
2023-08-03 16:50:38,975:INFO:Uploading model into container now
2023-08-03 16:50:38,975:INFO:_master_model_container: 1
2023-08-03 16:50:38,975:INFO:_display_container: 2
2023-08-03 16:50:38,983:INFO:LinearRegression(n_jobs=-1)
2023-08-03 16:50:38,983:INFO:create_model() successfully completed......................................
2023-08-03 16:50:39,088:INFO:SubProcess create_model() end ==================================
2023-08-03 16:50:39,088:INFO:Creating metrics dataframe
2023-08-03 16:50:39,112:INFO:Initializing Lasso Regression
2023-08-03 16:50:39,112:INFO:Total runtime is 0.09615206718444824 minutes
2023-08-03 16:50:39,120:INFO:SubProcess create_model() called ==================================
2023-08-03 16:50:39,120:INFO:Initializing create_model()
2023-08-03 16:50:39,120:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3449A400>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A378EF700>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 16:50:39,120:INFO:Checking exceptions
2023-08-03 16:50:39,120:INFO:Importing libraries
2023-08-03 16:50:39,120:INFO:Copying training dataset
2023-08-03 16:50:39,136:INFO:Defining folds
2023-08-03 16:50:39,136:INFO:Declaring metric variables
2023-08-03 16:50:39,144:INFO:Importing untrained model
2023-08-03 16:50:39,152:INFO:Lasso Regression Imported successfully
2023-08-03 16:50:39,168:INFO:Starting cross validation
2023-08-03 16:50:39,176:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 16:50:45,619:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.068e+08, tolerance: 1.714e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 16:50:45,771:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.918e+08, tolerance: 1.729e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 16:50:45,843:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.043e+08, tolerance: 1.736e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 16:50:45,892:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.911e+08, tolerance: 1.712e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 16:50:45,973:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.079e+08, tolerance: 1.725e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 16:50:46,180:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.884e+08, tolerance: 1.736e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 16:50:46,231:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.592e+08, tolerance: 1.715e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 16:50:46,264:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.219e+08, tolerance: 1.734e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 16:50:46,281:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.739e+08, tolerance: 1.722e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 16:50:46,344:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.949e+08, tolerance: 1.724e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 16:50:46,457:INFO:Calculating mean and std
2023-08-03 16:50:46,457:INFO:Creating metrics dataframe
2023-08-03 16:50:46,481:INFO:Uploading results into container
2023-08-03 16:50:46,489:INFO:Uploading model into container now
2023-08-03 16:50:46,489:INFO:_master_model_container: 2
2023-08-03 16:50:46,489:INFO:_display_container: 2
2023-08-03 16:50:46,489:INFO:Lasso(random_state=8919)
2023-08-03 16:50:46,489:INFO:create_model() successfully completed......................................
2023-08-03 16:50:46,586:INFO:SubProcess create_model() end ==================================
2023-08-03 16:50:46,586:INFO:Creating metrics dataframe
2023-08-03 16:50:46,610:INFO:Initializing Ridge Regression
2023-08-03 16:50:46,610:INFO:Total runtime is 0.22112079461415607 minutes
2023-08-03 16:50:46,618:INFO:SubProcess create_model() called ==================================
2023-08-03 16:50:46,618:INFO:Initializing create_model()
2023-08-03 16:50:46,618:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3449A400>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A378EF700>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 16:50:46,618:INFO:Checking exceptions
2023-08-03 16:50:46,618:INFO:Importing libraries
2023-08-03 16:50:46,618:INFO:Copying training dataset
2023-08-03 16:50:46,634:INFO:Defining folds
2023-08-03 16:50:46,634:INFO:Declaring metric variables
2023-08-03 16:50:46,642:INFO:Importing untrained model
2023-08-03 16:50:46,650:INFO:Ridge Regression Imported successfully
2023-08-03 16:50:46,682:INFO:Starting cross validation
2023-08-03 16:50:46,690:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 16:50:47,005:INFO:Calculating mean and std
2023-08-03 16:50:47,005:INFO:Creating metrics dataframe
2023-08-03 16:50:47,029:INFO:Uploading results into container
2023-08-03 16:50:47,029:INFO:Uploading model into container now
2023-08-03 16:50:47,029:INFO:_master_model_container: 3
2023-08-03 16:50:47,029:INFO:_display_container: 2
2023-08-03 16:50:47,029:INFO:Ridge(random_state=8919)
2023-08-03 16:50:47,029:INFO:create_model() successfully completed......................................
2023-08-03 16:50:47,133:INFO:SubProcess create_model() end ==================================
2023-08-03 16:50:47,133:INFO:Creating metrics dataframe
2023-08-03 16:50:47,149:INFO:Initializing Elastic Net
2023-08-03 16:50:47,149:INFO:Total runtime is 0.2301113486289978 minutes
2023-08-03 16:50:47,157:INFO:SubProcess create_model() called ==================================
2023-08-03 16:50:47,157:INFO:Initializing create_model()
2023-08-03 16:50:47,157:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3449A400>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A378EF700>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 16:50:47,157:INFO:Checking exceptions
2023-08-03 16:50:47,157:INFO:Importing libraries
2023-08-03 16:50:47,157:INFO:Copying training dataset
2023-08-03 16:50:47,173:INFO:Defining folds
2023-08-03 16:50:47,173:INFO:Declaring metric variables
2023-08-03 16:50:47,182:INFO:Importing untrained model
2023-08-03 16:50:47,198:INFO:Elastic Net Imported successfully
2023-08-03 16:50:47,222:INFO:Starting cross validation
2023-08-03 16:50:47,222:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 16:50:47,608:INFO:Calculating mean and std
2023-08-03 16:50:47,608:INFO:Creating metrics dataframe
2023-08-03 16:50:47,632:INFO:Uploading results into container
2023-08-03 16:50:47,640:INFO:Uploading model into container now
2023-08-03 16:50:47,640:INFO:_master_model_container: 4
2023-08-03 16:50:47,640:INFO:_display_container: 2
2023-08-03 16:50:47,640:INFO:ElasticNet(random_state=8919)
2023-08-03 16:50:47,640:INFO:create_model() successfully completed......................................
2023-08-03 16:50:47,738:INFO:SubProcess create_model() end ==================================
2023-08-03 16:50:47,738:INFO:Creating metrics dataframe
2023-08-03 16:50:47,762:INFO:Initializing Least Angle Regression
2023-08-03 16:50:47,762:INFO:Total runtime is 0.24032452503840127 minutes
2023-08-03 16:50:47,770:INFO:SubProcess create_model() called ==================================
2023-08-03 16:50:47,770:INFO:Initializing create_model()
2023-08-03 16:50:47,770:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3449A400>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A378EF700>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 16:50:47,770:INFO:Checking exceptions
2023-08-03 16:50:47,770:INFO:Importing libraries
2023-08-03 16:50:47,770:INFO:Copying training dataset
2023-08-03 16:50:47,786:INFO:Defining folds
2023-08-03 16:50:47,786:INFO:Declaring metric variables
2023-08-03 16:50:47,794:INFO:Importing untrained model
2023-08-03 16:50:47,802:INFO:Least Angle Regression Imported successfully
2023-08-03 16:50:47,810:INFO:Starting cross validation
2023-08-03 16:50:47,818:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 16:50:47,907:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 16:50:47,923:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 16:50:47,939:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 16:50:47,955:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 16:50:47,971:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 16:50:47,988:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 16:50:48,012:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 16:50:48,036:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 16:50:48,076:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 16:50:48,092:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 16:50:48,148:INFO:Calculating mean and std
2023-08-03 16:50:48,148:INFO:Creating metrics dataframe
2023-08-03 16:50:48,172:INFO:Uploading results into container
2023-08-03 16:50:48,172:INFO:Uploading model into container now
2023-08-03 16:50:48,172:INFO:_master_model_container: 5
2023-08-03 16:50:48,172:INFO:_display_container: 2
2023-08-03 16:50:48,172:INFO:Lars(random_state=8919)
2023-08-03 16:50:48,172:INFO:create_model() successfully completed......................................
2023-08-03 16:50:48,277:INFO:SubProcess create_model() end ==================================
2023-08-03 16:50:48,277:INFO:Creating metrics dataframe
2023-08-03 16:50:48,293:INFO:Initializing Lasso Least Angle Regression
2023-08-03 16:50:48,293:INFO:Total runtime is 0.24917820692062376 minutes
2023-08-03 16:50:48,301:INFO:SubProcess create_model() called ==================================
2023-08-03 16:50:48,301:INFO:Initializing create_model()
2023-08-03 16:50:48,301:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3449A400>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A378EF700>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 16:50:48,301:INFO:Checking exceptions
2023-08-03 16:50:48,301:INFO:Importing libraries
2023-08-03 16:50:48,301:INFO:Copying training dataset
2023-08-03 16:50:48,317:INFO:Defining folds
2023-08-03 16:50:48,325:INFO:Declaring metric variables
2023-08-03 16:50:48,333:INFO:Importing untrained model
2023-08-03 16:50:48,341:INFO:Lasso Least Angle Regression Imported successfully
2023-08-03 16:50:48,349:INFO:Starting cross validation
2023-08-03 16:50:48,357:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 16:50:48,454:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 16:50:48,470:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 16:50:48,486:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 16:50:48,502:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 16:50:48,518:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 16:50:48,550:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 16:50:48,574:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 16:50:48,599:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 16:50:48,623:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 16:50:48,631:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 16:50:48,704:INFO:Calculating mean and std
2023-08-03 16:50:48,704:INFO:Creating metrics dataframe
2023-08-03 16:50:48,728:INFO:Uploading results into container
2023-08-03 16:50:48,728:INFO:Uploading model into container now
2023-08-03 16:50:48,736:INFO:_master_model_container: 6
2023-08-03 16:50:48,736:INFO:_display_container: 2
2023-08-03 16:50:48,736:INFO:LassoLars(random_state=8919)
2023-08-03 16:50:48,736:INFO:create_model() successfully completed......................................
2023-08-03 16:50:48,833:INFO:SubProcess create_model() end ==================================
2023-08-03 16:50:48,833:INFO:Creating metrics dataframe
2023-08-03 16:50:48,849:INFO:Initializing Orthogonal Matching Pursuit
2023-08-03 16:50:48,849:INFO:Total runtime is 0.2584418694178263 minutes
2023-08-03 16:50:48,857:INFO:SubProcess create_model() called ==================================
2023-08-03 16:50:48,857:INFO:Initializing create_model()
2023-08-03 16:50:48,857:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3449A400>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A378EF700>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 16:50:48,857:INFO:Checking exceptions
2023-08-03 16:50:48,857:INFO:Importing libraries
2023-08-03 16:50:48,857:INFO:Copying training dataset
2023-08-03 16:50:48,873:INFO:Defining folds
2023-08-03 16:50:48,873:INFO:Declaring metric variables
2023-08-03 16:50:48,889:INFO:Importing untrained model
2023-08-03 16:50:48,898:INFO:Orthogonal Matching Pursuit Imported successfully
2023-08-03 16:50:48,914:INFO:Starting cross validation
2023-08-03 16:50:48,914:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 16:50:49,010:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 16:50:49,026:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 16:50:49,042:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 16:50:49,066:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 16:50:49,082:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 16:50:49,099:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 16:50:49,115:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 16:50:49,139:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 16:50:49,163:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 16:50:49,179:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 16:50:49,260:INFO:Calculating mean and std
2023-08-03 16:50:49,260:INFO:Creating metrics dataframe
2023-08-03 16:50:49,284:INFO:Uploading results into container
2023-08-03 16:50:49,284:INFO:Uploading model into container now
2023-08-03 16:50:49,284:INFO:_master_model_container: 7
2023-08-03 16:50:49,284:INFO:_display_container: 2
2023-08-03 16:50:49,284:INFO:OrthogonalMatchingPursuit()
2023-08-03 16:50:49,284:INFO:create_model() successfully completed......................................
2023-08-03 16:50:49,398:INFO:SubProcess create_model() end ==================================
2023-08-03 16:50:49,398:INFO:Creating metrics dataframe
2023-08-03 16:50:49,421:INFO:Initializing Bayesian Ridge
2023-08-03 16:50:49,421:INFO:Total runtime is 0.26798183520634966 minutes
2023-08-03 16:50:49,429:INFO:SubProcess create_model() called ==================================
2023-08-03 16:50:49,429:INFO:Initializing create_model()
2023-08-03 16:50:49,429:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3449A400>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A378EF700>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 16:50:49,429:INFO:Checking exceptions
2023-08-03 16:50:49,429:INFO:Importing libraries
2023-08-03 16:50:49,429:INFO:Copying training dataset
2023-08-03 16:50:49,453:INFO:Defining folds
2023-08-03 16:50:49,453:INFO:Declaring metric variables
2023-08-03 16:50:49,461:INFO:Importing untrained model
2023-08-03 16:50:49,469:INFO:Bayesian Ridge Imported successfully
2023-08-03 16:50:49,485:INFO:Starting cross validation
2023-08-03 16:50:49,485:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 16:50:49,864:INFO:Calculating mean and std
2023-08-03 16:50:49,864:INFO:Creating metrics dataframe
2023-08-03 16:50:49,889:INFO:Uploading results into container
2023-08-03 16:50:49,889:INFO:Uploading model into container now
2023-08-03 16:50:49,889:INFO:_master_model_container: 8
2023-08-03 16:50:49,889:INFO:_display_container: 2
2023-08-03 16:50:49,889:INFO:BayesianRidge()
2023-08-03 16:50:49,889:INFO:create_model() successfully completed......................................
2023-08-03 16:50:49,994:INFO:SubProcess create_model() end ==================================
2023-08-03 16:50:49,994:INFO:Creating metrics dataframe
2023-08-03 16:50:50,018:INFO:Initializing Passive Aggressive Regressor
2023-08-03 16:50:50,018:INFO:Total runtime is 0.27792194684346516 minutes
2023-08-03 16:50:50,026:INFO:SubProcess create_model() called ==================================
2023-08-03 16:50:50,026:INFO:Initializing create_model()
2023-08-03 16:50:50,026:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3449A400>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A378EF700>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 16:50:50,026:INFO:Checking exceptions
2023-08-03 16:50:50,026:INFO:Importing libraries
2023-08-03 16:50:50,026:INFO:Copying training dataset
2023-08-03 16:50:50,042:INFO:Defining folds
2023-08-03 16:50:50,042:INFO:Declaring metric variables
2023-08-03 16:50:50,050:INFO:Importing untrained model
2023-08-03 16:50:50,050:INFO:Passive Aggressive Regressor Imported successfully
2023-08-03 16:50:50,066:INFO:Starting cross validation
2023-08-03 16:50:50,066:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 16:50:50,443:INFO:Calculating mean and std
2023-08-03 16:50:50,443:INFO:Creating metrics dataframe
2023-08-03 16:50:50,467:INFO:Uploading results into container
2023-08-03 16:50:50,467:INFO:Uploading model into container now
2023-08-03 16:50:50,467:INFO:_master_model_container: 9
2023-08-03 16:50:50,467:INFO:_display_container: 2
2023-08-03 16:50:50,467:INFO:PassiveAggressiveRegressor(random_state=8919)
2023-08-03 16:50:50,467:INFO:create_model() successfully completed......................................
2023-08-03 16:50:50,565:INFO:SubProcess create_model() end ==================================
2023-08-03 16:50:50,565:INFO:Creating metrics dataframe
2023-08-03 16:50:50,590:INFO:Initializing Huber Regressor
2023-08-03 16:50:50,590:INFO:Total runtime is 0.2874613086382548 minutes
2023-08-03 16:50:50,598:INFO:SubProcess create_model() called ==================================
2023-08-03 16:50:50,598:INFO:Initializing create_model()
2023-08-03 16:50:50,598:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3449A400>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A378EF700>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 16:50:50,598:INFO:Checking exceptions
2023-08-03 16:50:50,598:INFO:Importing libraries
2023-08-03 16:50:50,598:INFO:Copying training dataset
2023-08-03 16:50:50,614:INFO:Defining folds
2023-08-03 16:50:50,614:INFO:Declaring metric variables
2023-08-03 16:50:50,622:INFO:Importing untrained model
2023-08-03 16:50:50,630:INFO:Huber Regressor Imported successfully
2023-08-03 16:50:50,646:INFO:Starting cross validation
2023-08-03 16:50:50,646:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 16:50:51,379:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 16:50:51,411:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 16:50:51,443:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 16:50:51,508:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 16:50:51,572:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 16:50:51,597:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 16:50:51,686:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 16:50:51,702:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 16:50:51,702:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 16:50:51,742:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 16:50:51,871:INFO:Calculating mean and std
2023-08-03 16:50:51,871:INFO:Creating metrics dataframe
2023-08-03 16:50:51,903:INFO:Uploading results into container
2023-08-03 16:50:51,911:INFO:Uploading model into container now
2023-08-03 16:50:51,911:INFO:_master_model_container: 10
2023-08-03 16:50:51,911:INFO:_display_container: 2
2023-08-03 16:50:51,911:INFO:HuberRegressor()
2023-08-03 16:50:51,911:INFO:create_model() successfully completed......................................
2023-08-03 16:50:52,024:INFO:SubProcess create_model() end ==================================
2023-08-03 16:50:52,024:INFO:Creating metrics dataframe
2023-08-03 16:50:52,048:INFO:Initializing K Neighbors Regressor
2023-08-03 16:50:52,048:INFO:Total runtime is 0.3117586851119995 minutes
2023-08-03 16:50:52,056:INFO:SubProcess create_model() called ==================================
2023-08-03 16:50:52,056:INFO:Initializing create_model()
2023-08-03 16:50:52,056:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3449A400>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A378EF700>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 16:50:52,056:INFO:Checking exceptions
2023-08-03 16:50:52,056:INFO:Importing libraries
2023-08-03 16:50:52,056:INFO:Copying training dataset
2023-08-03 16:50:52,064:INFO:Defining folds
2023-08-03 16:50:52,064:INFO:Declaring metric variables
2023-08-03 16:50:52,072:INFO:Importing untrained model
2023-08-03 16:50:52,080:INFO:K Neighbors Regressor Imported successfully
2023-08-03 16:50:52,097:INFO:Starting cross validation
2023-08-03 16:50:52,097:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 16:50:53,846:INFO:Calculating mean and std
2023-08-03 16:50:53,846:INFO:Creating metrics dataframe
2023-08-03 16:50:53,886:INFO:Uploading results into container
2023-08-03 16:50:53,886:INFO:Uploading model into container now
2023-08-03 16:50:53,886:INFO:_master_model_container: 11
2023-08-03 16:50:53,886:INFO:_display_container: 2
2023-08-03 16:50:53,886:INFO:KNeighborsRegressor(n_jobs=-1)
2023-08-03 16:50:53,886:INFO:create_model() successfully completed......................................
2023-08-03 16:50:53,982:INFO:SubProcess create_model() end ==================================
2023-08-03 16:50:53,982:INFO:Creating metrics dataframe
2023-08-03 16:50:54,007:INFO:Initializing Decision Tree Regressor
2023-08-03 16:50:54,007:INFO:Total runtime is 0.3444082975387573 minutes
2023-08-03 16:50:54,015:INFO:SubProcess create_model() called ==================================
2023-08-03 16:50:54,015:INFO:Initializing create_model()
2023-08-03 16:50:54,015:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3449A400>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A378EF700>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 16:50:54,015:INFO:Checking exceptions
2023-08-03 16:50:54,015:INFO:Importing libraries
2023-08-03 16:50:54,015:INFO:Copying training dataset
2023-08-03 16:50:54,031:INFO:Defining folds
2023-08-03 16:50:54,031:INFO:Declaring metric variables
2023-08-03 16:50:54,039:INFO:Importing untrained model
2023-08-03 16:50:54,047:INFO:Decision Tree Regressor Imported successfully
2023-08-03 16:50:54,063:INFO:Starting cross validation
2023-08-03 16:50:54,063:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 16:50:54,821:INFO:Calculating mean and std
2023-08-03 16:50:54,821:INFO:Creating metrics dataframe
2023-08-03 16:50:54,886:INFO:Uploading results into container
2023-08-03 16:50:54,886:INFO:Uploading model into container now
2023-08-03 16:50:54,894:INFO:_master_model_container: 12
2023-08-03 16:50:54,894:INFO:_display_container: 2
2023-08-03 16:50:54,894:INFO:DecisionTreeRegressor(random_state=8919)
2023-08-03 16:50:54,894:INFO:create_model() successfully completed......................................
2023-08-03 16:50:54,990:INFO:SubProcess create_model() end ==================================
2023-08-03 16:50:54,990:INFO:Creating metrics dataframe
2023-08-03 16:50:55,015:INFO:Initializing Random Forest Regressor
2023-08-03 16:50:55,015:INFO:Total runtime is 0.36120326916376744 minutes
2023-08-03 16:50:55,023:INFO:SubProcess create_model() called ==================================
2023-08-03 16:50:55,023:INFO:Initializing create_model()
2023-08-03 16:50:55,023:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3449A400>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A378EF700>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 16:50:55,023:INFO:Checking exceptions
2023-08-03 16:50:55,023:INFO:Importing libraries
2023-08-03 16:50:55,023:INFO:Copying training dataset
2023-08-03 16:50:55,039:INFO:Defining folds
2023-08-03 16:50:55,039:INFO:Declaring metric variables
2023-08-03 16:50:55,047:INFO:Importing untrained model
2023-08-03 16:50:55,055:INFO:Random Forest Regressor Imported successfully
2023-08-03 16:50:55,080:INFO:Starting cross validation
2023-08-03 16:50:55,080:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 16:51:14,053:WARNING:C:\Users\patta\AppData\Roaming\Python\Python39\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.57s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-08-03 16:51:14,077:WARNING:C:\Users\patta\AppData\Roaming\Python\Python39\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.59s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-08-03 16:51:14,205:WARNING:C:\Users\patta\AppData\Roaming\Python\Python39\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.57s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-08-03 16:51:15,187:INFO:Calculating mean and std
2023-08-03 16:51:15,187:INFO:Creating metrics dataframe
2023-08-03 16:51:15,276:INFO:Uploading results into container
2023-08-03 16:51:15,276:INFO:Uploading model into container now
2023-08-03 16:51:15,276:INFO:_master_model_container: 13
2023-08-03 16:51:15,276:INFO:_display_container: 2
2023-08-03 16:51:15,276:INFO:RandomForestRegressor(n_jobs=-1, random_state=8919)
2023-08-03 16:51:15,276:INFO:create_model() successfully completed......................................
2023-08-03 16:51:15,405:INFO:SubProcess create_model() end ==================================
2023-08-03 16:51:15,405:INFO:Creating metrics dataframe
2023-08-03 16:51:15,429:INFO:Initializing Extra Trees Regressor
2023-08-03 16:51:15,429:INFO:Total runtime is 0.7014356652895609 minutes
2023-08-03 16:51:15,437:INFO:SubProcess create_model() called ==================================
2023-08-03 16:51:15,441:INFO:Initializing create_model()
2023-08-03 16:51:15,441:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3449A400>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A378EF700>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 16:51:15,441:INFO:Checking exceptions
2023-08-03 16:51:15,441:INFO:Importing libraries
2023-08-03 16:51:15,441:INFO:Copying training dataset
2023-08-03 16:51:15,453:INFO:Defining folds
2023-08-03 16:51:15,453:INFO:Declaring metric variables
2023-08-03 16:51:15,462:INFO:Importing untrained model
2023-08-03 16:51:15,469:INFO:Extra Trees Regressor Imported successfully
2023-08-03 16:51:15,495:INFO:Starting cross validation
2023-08-03 16:51:15,495:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 16:51:26,309:WARNING:C:\Users\patta\AppData\Roaming\Python\Python39\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.56s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-08-03 16:51:27,443:INFO:Calculating mean and std
2023-08-03 16:51:27,443:INFO:Creating metrics dataframe
2023-08-03 16:51:27,539:INFO:Uploading results into container
2023-08-03 16:51:27,539:INFO:Uploading model into container now
2023-08-03 16:51:27,539:INFO:_master_model_container: 14
2023-08-03 16:51:27,539:INFO:_display_container: 2
2023-08-03 16:51:27,539:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=8919)
2023-08-03 16:51:27,539:INFO:create_model() successfully completed......................................
2023-08-03 16:51:27,652:INFO:SubProcess create_model() end ==================================
2023-08-03 16:51:27,652:INFO:Creating metrics dataframe
2023-08-03 16:51:27,676:INFO:Initializing AdaBoost Regressor
2023-08-03 16:51:27,676:INFO:Total runtime is 0.9055677533149719 minutes
2023-08-03 16:51:27,676:INFO:SubProcess create_model() called ==================================
2023-08-03 16:51:27,676:INFO:Initializing create_model()
2023-08-03 16:51:27,676:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3449A400>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A378EF700>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 16:51:27,685:INFO:Checking exceptions
2023-08-03 16:51:27,685:INFO:Importing libraries
2023-08-03 16:51:27,685:INFO:Copying training dataset
2023-08-03 16:51:27,693:INFO:Defining folds
2023-08-03 16:51:27,693:INFO:Declaring metric variables
2023-08-03 16:51:27,701:INFO:Importing untrained model
2023-08-03 16:51:27,709:INFO:AdaBoost Regressor Imported successfully
2023-08-03 16:51:27,733:INFO:Starting cross validation
2023-08-03 16:51:27,733:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 16:51:29,338:INFO:Calculating mean and std
2023-08-03 16:51:29,338:INFO:Creating metrics dataframe
2023-08-03 16:51:29,483:INFO:Uploading results into container
2023-08-03 16:51:29,483:INFO:Uploading model into container now
2023-08-03 16:51:29,483:INFO:_master_model_container: 15
2023-08-03 16:51:29,483:INFO:_display_container: 2
2023-08-03 16:51:29,483:INFO:AdaBoostRegressor(random_state=8919)
2023-08-03 16:51:29,483:INFO:create_model() successfully completed......................................
2023-08-03 16:51:29,587:INFO:SubProcess create_model() end ==================================
2023-08-03 16:51:29,587:INFO:Creating metrics dataframe
2023-08-03 16:51:29,619:INFO:Initializing Gradient Boosting Regressor
2023-08-03 16:51:29,619:INFO:Total runtime is 0.9379509647687275 minutes
2023-08-03 16:51:29,627:INFO:SubProcess create_model() called ==================================
2023-08-03 16:51:29,627:INFO:Initializing create_model()
2023-08-03 16:51:29,627:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3449A400>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A378EF700>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 16:51:29,627:INFO:Checking exceptions
2023-08-03 16:51:29,635:INFO:Importing libraries
2023-08-03 16:51:29,635:INFO:Copying training dataset
2023-08-03 16:51:29,651:INFO:Defining folds
2023-08-03 16:51:29,651:INFO:Declaring metric variables
2023-08-03 16:51:29,659:INFO:Importing untrained model
2023-08-03 16:51:29,667:INFO:Gradient Boosting Regressor Imported successfully
2023-08-03 16:51:29,684:INFO:Starting cross validation
2023-08-03 16:51:29,692:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 16:51:33,918:INFO:Calculating mean and std
2023-08-03 16:51:33,918:INFO:Creating metrics dataframe
2023-08-03 16:51:34,055:INFO:Uploading results into container
2023-08-03 16:51:34,055:INFO:Uploading model into container now
2023-08-03 16:51:34,055:INFO:_master_model_container: 16
2023-08-03 16:51:34,055:INFO:_display_container: 2
2023-08-03 16:51:34,055:INFO:GradientBoostingRegressor(random_state=8919)
2023-08-03 16:51:34,055:INFO:create_model() successfully completed......................................
2023-08-03 16:51:34,160:INFO:SubProcess create_model() end ==================================
2023-08-03 16:51:34,160:INFO:Creating metrics dataframe
2023-08-03 16:51:34,192:INFO:Initializing Extreme Gradient Boosting
2023-08-03 16:51:34,195:INFO:Total runtime is 1.0142052690188088 minutes
2023-08-03 16:51:34,200:INFO:SubProcess create_model() called ==================================
2023-08-03 16:51:34,200:INFO:Initializing create_model()
2023-08-03 16:51:34,200:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3449A400>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A378EF700>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 16:51:34,200:INFO:Checking exceptions
2023-08-03 16:51:34,200:INFO:Importing libraries
2023-08-03 16:51:34,200:INFO:Copying training dataset
2023-08-03 16:51:34,216:INFO:Defining folds
2023-08-03 16:51:34,216:INFO:Declaring metric variables
2023-08-03 16:51:34,224:INFO:Importing untrained model
2023-08-03 16:51:34,232:INFO:Extreme Gradient Boosting Imported successfully
2023-08-03 16:51:34,248:INFO:Starting cross validation
2023-08-03 16:51:34,256:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 16:51:39,114:INFO:Calculating mean and std
2023-08-03 16:51:39,114:INFO:Creating metrics dataframe
2023-08-03 16:51:39,259:INFO:Uploading results into container
2023-08-03 16:51:39,259:INFO:Uploading model into container now
2023-08-03 16:51:39,267:INFO:_master_model_container: 17
2023-08-03 16:51:39,267:INFO:_display_container: 2
2023-08-03 16:51:39,267:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=8919, ...)
2023-08-03 16:51:39,267:INFO:create_model() successfully completed......................................
2023-08-03 16:51:39,371:INFO:SubProcess create_model() end ==================================
2023-08-03 16:51:39,371:INFO:Creating metrics dataframe
2023-08-03 16:51:39,403:INFO:Initializing Light Gradient Boosting Machine
2023-08-03 16:51:39,403:INFO:Total runtime is 1.1010143160820005 minutes
2023-08-03 16:51:39,412:INFO:SubProcess create_model() called ==================================
2023-08-03 16:51:39,412:INFO:Initializing create_model()
2023-08-03 16:51:39,412:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3449A400>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A378EF700>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 16:51:39,412:INFO:Checking exceptions
2023-08-03 16:51:39,412:INFO:Importing libraries
2023-08-03 16:51:39,412:INFO:Copying training dataset
2023-08-03 16:51:39,428:INFO:Defining folds
2023-08-03 16:51:39,428:INFO:Declaring metric variables
2023-08-03 16:51:39,436:INFO:Importing untrained model
2023-08-03 16:51:39,444:INFO:Light Gradient Boosting Machine Imported successfully
2023-08-03 16:51:39,452:INFO:Starting cross validation
2023-08-03 16:51:39,460:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 16:51:50,327:INFO:Calculating mean and std
2023-08-03 16:51:50,327:INFO:Creating metrics dataframe
2023-08-03 16:51:50,472:INFO:Uploading results into container
2023-08-03 16:51:50,480:INFO:Uploading model into container now
2023-08-03 16:51:50,480:INFO:_master_model_container: 18
2023-08-03 16:51:50,480:INFO:_display_container: 2
2023-08-03 16:51:50,480:INFO:LGBMRegressor(n_jobs=-1, random_state=8919)
2023-08-03 16:51:50,480:INFO:create_model() successfully completed......................................
2023-08-03 16:51:50,577:INFO:SubProcess create_model() end ==================================
2023-08-03 16:51:50,577:INFO:Creating metrics dataframe
2023-08-03 16:51:50,609:INFO:Initializing Dummy Regressor
2023-08-03 16:51:50,609:INFO:Total runtime is 1.2877695798873898 minutes
2023-08-03 16:51:50,617:INFO:SubProcess create_model() called ==================================
2023-08-03 16:51:50,617:INFO:Initializing create_model()
2023-08-03 16:51:50,617:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3449A400>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A378EF700>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 16:51:50,617:INFO:Checking exceptions
2023-08-03 16:51:50,617:INFO:Importing libraries
2023-08-03 16:51:50,617:INFO:Copying training dataset
2023-08-03 16:51:50,633:INFO:Defining folds
2023-08-03 16:51:50,633:INFO:Declaring metric variables
2023-08-03 16:51:50,643:INFO:Importing untrained model
2023-08-03 16:51:50,649:INFO:Dummy Regressor Imported successfully
2023-08-03 16:51:50,665:INFO:Starting cross validation
2023-08-03 16:51:50,665:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 16:51:51,777:INFO:Calculating mean and std
2023-08-03 16:51:51,777:INFO:Creating metrics dataframe
2023-08-03 16:51:51,948:INFO:Uploading results into container
2023-08-03 16:51:51,948:INFO:Uploading model into container now
2023-08-03 16:51:51,948:INFO:_master_model_container: 19
2023-08-03 16:51:51,948:INFO:_display_container: 2
2023-08-03 16:51:51,948:INFO:DummyRegressor()
2023-08-03 16:51:51,948:INFO:create_model() successfully completed......................................
2023-08-03 16:51:52,048:INFO:SubProcess create_model() end ==================================
2023-08-03 16:51:52,048:INFO:Creating metrics dataframe
2023-08-03 16:51:52,101:INFO:Initializing create_model()
2023-08-03 16:51:52,101:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3449A400>, estimator=GradientBoostingRegressor(random_state=8919), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-08-03 16:51:52,101:INFO:Checking exceptions
2023-08-03 16:51:52,109:INFO:Importing libraries
2023-08-03 16:51:52,109:INFO:Copying training dataset
2023-08-03 16:51:52,117:INFO:Defining folds
2023-08-03 16:51:52,117:INFO:Declaring metric variables
2023-08-03 16:51:52,125:INFO:Importing untrained model
2023-08-03 16:51:52,125:INFO:Declaring custom model
2023-08-03 16:51:52,125:INFO:Gradient Boosting Regressor Imported successfully
2023-08-03 16:51:52,125:INFO:Cross validation set to False
2023-08-03 16:51:52,125:INFO:Fitting Model
2023-08-03 16:51:55,023:INFO:GradientBoostingRegressor(random_state=8919)
2023-08-03 16:51:55,023:INFO:create_model() successfully completed......................................
2023-08-03 16:51:55,200:INFO:_master_model_container: 19
2023-08-03 16:51:55,200:INFO:_display_container: 2
2023-08-03 16:51:55,208:INFO:GradientBoostingRegressor(random_state=8919)
2023-08-03 16:51:55,208:INFO:compare_models() successfully completed......................................
2023-08-03 17:14:36,323:WARNING:C:\Users\patta\AppData\Local\Temp\ipykernel_21192\170012226.py:1: RuntimeWarning: overflow encountered in exp
  predictions=np.exp(gbr_model.predict(testdata))

2023-08-03 17:16:05,600:WARNING:C:\Users\patta\AppData\Local\Temp\ipykernel_21192\170012226.py:1: RuntimeWarning: overflow encountered in exp
  predictions=np.exp(gbr_model.predict(testdata))

2023-08-03 17:18:07,219:WARNING:C:\Users\patta\AppData\Local\Temp\ipykernel_21192\170012226.py:1: RuntimeWarning: overflow encountered in exp
  predictions=np.exp(gbr_model.predict(testdata))

2023-08-03 17:51:33,484:INFO:PyCaret RegressionExperiment
2023-08-03 17:51:33,485:INFO:Logging name: reg-default-name
2023-08-03 17:51:33,485:INFO:ML Usecase: MLUsecase.REGRESSION
2023-08-03 17:51:33,485:INFO:version 3.0.4
2023-08-03 17:51:33,485:INFO:Initializing setup()
2023-08-03 17:51:33,485:INFO:self.USI: 45cc
2023-08-03 17:51:33,485:INFO:self._variable_keys: {'fold_shuffle_param', 'data', 'memory', 'gpu_n_jobs_param', '_available_plots', 'n_jobs_param', 'y_train', '_ml_usecase', 'logging_param', 'y', 'fold_generator', 'transform_target_param', 'X_train', 'pipeline', 'X', 'USI', 'X_test', 'gpu_param', 'fold_groups_param', 'log_plots_param', 'exp_name_log', 'y_test', 'exp_id', 'idx', 'seed', 'target_param', 'html_param'}
2023-08-03 17:51:33,485:INFO:Checking environment
2023-08-03 17:51:33,486:INFO:python_version: 3.9.13
2023-08-03 17:51:33,486:INFO:python_build: ('main', 'Aug 25 2022 23:51:50')
2023-08-03 17:51:33,486:INFO:machine: AMD64
2023-08-03 17:51:33,486:INFO:platform: Windows-10-10.0.22621-SP0
2023-08-03 17:51:33,486:INFO:Memory: svmem(total=34014814208, available=18406154240, percent=45.9, used=15608659968, free=18406154240)
2023-08-03 17:51:33,486:INFO:Physical Core: 14
2023-08-03 17:51:33,486:INFO:Logical Core: 20
2023-08-03 17:51:33,486:INFO:Checking libraries
2023-08-03 17:51:33,486:INFO:System:
2023-08-03 17:51:33,486:INFO:    python: 3.9.13 (main, Aug 25 2022, 23:51:50) [MSC v.1916 64 bit (AMD64)]
2023-08-03 17:51:33,486:INFO:executable: C:\ProgramData\Anaconda3\python.exe
2023-08-03 17:51:33,486:INFO:   machine: Windows-10-10.0.22621-SP0
2023-08-03 17:51:33,486:INFO:PyCaret required dependencies:
2023-08-03 17:51:33,486:INFO:                 pip: 22.2.2
2023-08-03 17:51:33,486:INFO:          setuptools: 63.4.1
2023-08-03 17:51:33,486:INFO:             pycaret: 3.0.4
2023-08-03 17:51:33,486:INFO:             IPython: 7.31.1
2023-08-03 17:51:33,486:INFO:          ipywidgets: 7.6.5
2023-08-03 17:51:33,486:INFO:                tqdm: 4.64.1
2023-08-03 17:51:33,486:INFO:               numpy: 1.21.5
2023-08-03 17:51:33,486:INFO:              pandas: 1.4.4
2023-08-03 17:51:33,486:INFO:              jinja2: 2.11.3
2023-08-03 17:51:33,486:INFO:               scipy: 1.9.1
2023-08-03 17:51:33,486:INFO:              joblib: 1.1.0
2023-08-03 17:51:33,486:INFO:             sklearn: 1.0.2
2023-08-03 17:51:33,486:INFO:                pyod: 1.1.0
2023-08-03 17:51:33,486:INFO:            imblearn: 0.11.0
2023-08-03 17:51:33,486:INFO:   category_encoders: 2.6.1
2023-08-03 17:51:33,486:INFO:            lightgbm: 4.0.0
2023-08-03 17:51:33,486:INFO:               numba: 0.55.1
2023-08-03 17:51:33,487:INFO:            requests: 2.28.1
2023-08-03 17:51:33,487:INFO:          matplotlib: 3.5.2
2023-08-03 17:51:33,487:INFO:          scikitplot: 0.3.7
2023-08-03 17:51:33,487:INFO:         yellowbrick: 1.5
2023-08-03 17:51:33,487:INFO:              plotly: 5.9.0
2023-08-03 17:51:33,487:INFO:    plotly-resampler: Not installed
2023-08-03 17:51:33,487:INFO:             kaleido: 0.2.1
2023-08-03 17:51:33,487:INFO:           schemdraw: 0.15
2023-08-03 17:51:33,487:INFO:         statsmodels: 0.13.2
2023-08-03 17:51:33,487:INFO:              sktime: 0.21.0
2023-08-03 17:51:33,487:INFO:               tbats: 1.1.3
2023-08-03 17:51:33,487:INFO:            pmdarima: 2.0.3
2023-08-03 17:51:33,487:INFO:              psutil: 5.9.0
2023-08-03 17:51:33,487:INFO:          markupsafe: 2.0.1
2023-08-03 17:51:33,487:INFO:             pickle5: Not installed
2023-08-03 17:51:33,487:INFO:         cloudpickle: 2.0.0
2023-08-03 17:51:33,487:INFO:         deprecation: 2.1.0
2023-08-03 17:51:33,487:INFO:              xxhash: 3.2.0
2023-08-03 17:51:33,487:INFO:           wurlitzer: Not installed
2023-08-03 17:51:33,487:INFO:PyCaret optional dependencies:
2023-08-03 17:51:33,487:INFO:                shap: Not installed
2023-08-03 17:51:33,487:INFO:           interpret: Not installed
2023-08-03 17:51:33,487:INFO:                umap: Not installed
2023-08-03 17:51:33,487:INFO:    pandas_profiling: Not installed
2023-08-03 17:51:33,487:INFO:  explainerdashboard: Not installed
2023-08-03 17:51:33,487:INFO:             autoviz: Not installed
2023-08-03 17:51:33,487:INFO:           fairlearn: Not installed
2023-08-03 17:51:33,487:INFO:          deepchecks: Not installed
2023-08-03 17:51:33,487:INFO:             xgboost: 1.7.6
2023-08-03 17:51:33,487:INFO:            catboost: Not installed
2023-08-03 17:51:33,487:INFO:              kmodes: Not installed
2023-08-03 17:51:33,487:INFO:             mlxtend: Not installed
2023-08-03 17:51:33,487:INFO:       statsforecast: Not installed
2023-08-03 17:51:33,487:INFO:        tune_sklearn: Not installed
2023-08-03 17:51:33,487:INFO:                 ray: Not installed
2023-08-03 17:51:33,487:INFO:            hyperopt: Not installed
2023-08-03 17:51:33,487:INFO:              optuna: Not installed
2023-08-03 17:51:33,487:INFO:               skopt: Not installed
2023-08-03 17:51:33,487:INFO:              mlflow: Not installed
2023-08-03 17:51:33,487:INFO:              gradio: Not installed
2023-08-03 17:51:33,487:INFO:             fastapi: Not installed
2023-08-03 17:51:33,488:INFO:             uvicorn: Not installed
2023-08-03 17:51:33,488:INFO:              m2cgen: Not installed
2023-08-03 17:51:33,488:INFO:           evidently: Not installed
2023-08-03 17:51:33,488:INFO:               fugue: Not installed
2023-08-03 17:51:33,488:INFO:           streamlit: Not installed
2023-08-03 17:51:33,488:INFO:             prophet: Not installed
2023-08-03 17:51:33,488:INFO:None
2023-08-03 17:51:33,488:INFO:Set up data.
2023-08-03 17:51:33,502:INFO:Set up train/test split.
2023-08-03 17:51:33,508:INFO:Set up index.
2023-08-03 17:51:33,509:INFO:Set up folding strategy.
2023-08-03 17:51:33,509:INFO:Assigning column types.
2023-08-03 17:51:33,514:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-08-03 17:51:33,515:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-03 17:51:33,518:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-03 17:51:33,523:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-03 17:51:33,600:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 17:51:33,651:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-03 17:51:33,651:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 17:51:33,653:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 17:51:33,654:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-03 17:51:33,658:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-03 17:51:33,661:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-03 17:51:33,723:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 17:51:33,773:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-03 17:51:33,773:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 17:51:33,776:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 17:51:33,777:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-08-03 17:51:33,780:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-03 17:51:33,783:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-03 17:51:33,843:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 17:51:33,881:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-03 17:51:33,882:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 17:51:33,884:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 17:51:33,888:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-03 17:51:33,892:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-03 17:51:33,948:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 17:51:33,987:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-03 17:51:33,987:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 17:51:33,990:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 17:51:33,990:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-08-03 17:51:33,998:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-03 17:51:34,052:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 17:51:34,092:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-03 17:51:34,093:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 17:51:34,095:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 17:51:34,103:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-03 17:51:34,161:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 17:51:34,201:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-03 17:51:34,201:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 17:51:34,204:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 17:51:34,204:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-08-03 17:51:34,266:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 17:51:34,306:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-03 17:51:34,307:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 17:51:34,309:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 17:51:34,376:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 17:51:34,416:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-03 17:51:34,416:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 17:51:34,418:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 17:51:34,418:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-08-03 17:51:34,474:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 17:51:34,513:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 17:51:34,516:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 17:51:34,573:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 17:51:34,639:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 17:51:34,642:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 17:51:34,643:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-08-03 17:51:34,748:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 17:51:34,750:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 17:51:34,853:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 17:51:34,855:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 17:51:34,856:INFO:Preparing preprocessing pipeline...
2023-08-03 17:51:34,856:INFO:Set up simple imputation.
2023-08-03 17:51:34,874:INFO:Finished creating preprocessing pipeline.
2023-08-03 17:51:34,879:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\patta\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['clonesize', 'honeybee', 'bumbles',
                                             'andrena', 'osmia',
                                             'MaxOfUpperTRange',
                                             'MinOfUpperTRange',
                                             'AverageOfUpperTRange',
                                             'MaxOfLowerTRange',
                                             'MinOfLowerTRange',
                                             'AverageOfLowerTRange',
                                             'RainingDays',
                                             'AverageRainingDays', 'fruitset',
                                             'fruitmass', 'seeds'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-08-03 17:51:34,879:INFO:Creating final display dataframe.
2023-08-03 17:51:34,956:INFO:Setup _display_container:                     Description             Value
0                    Session id               178
1                        Target             yield
2                   Target type        Regression
3           Original data shape       (15289, 17)
4        Transformed data shape       (15289, 17)
5   Transformed train set shape       (10702, 17)
6    Transformed test set shape        (4587, 17)
7              Numeric features                16
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              45cc
2023-08-03 17:51:35,083:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 17:51:35,085:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 17:51:35,199:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 17:51:35,204:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 17:51:35,205:INFO:setup() successfully completed in 1.77s...............
2023-08-03 17:51:35,253:INFO:Initializing compare_models()
2023-08-03 17:51:35,253:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A43A76A90>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000020A43A76A90>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-08-03 17:51:35,253:INFO:Checking exceptions
2023-08-03 17:51:35,257:INFO:Preparing display monitor
2023-08-03 17:51:35,301:INFO:Initializing Linear Regression
2023-08-03 17:51:35,302:INFO:Total runtime is 3.355344136555989e-05 minutes
2023-08-03 17:51:35,306:INFO:SubProcess create_model() called ==================================
2023-08-03 17:51:35,307:INFO:Initializing create_model()
2023-08-03 17:51:35,307:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A43A76A90>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A3EC70520>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 17:51:35,307:INFO:Checking exceptions
2023-08-03 17:51:35,307:INFO:Importing libraries
2023-08-03 17:51:35,307:INFO:Copying training dataset
2023-08-03 17:51:35,315:INFO:Defining folds
2023-08-03 17:51:35,315:INFO:Declaring metric variables
2023-08-03 17:51:35,321:INFO:Importing untrained model
2023-08-03 17:51:35,325:INFO:Linear Regression Imported successfully
2023-08-03 17:51:35,332:INFO:Starting cross validation
2023-08-03 17:51:35,332:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 17:51:39,032:INFO:Calculating mean and std
2023-08-03 17:51:39,035:INFO:Creating metrics dataframe
2023-08-03 17:51:39,175:INFO:Uploading results into container
2023-08-03 17:51:39,176:INFO:Uploading model into container now
2023-08-03 17:51:39,177:INFO:_master_model_container: 1
2023-08-03 17:51:39,177:INFO:_display_container: 2
2023-08-03 17:51:39,177:INFO:LinearRegression(n_jobs=-1)
2023-08-03 17:51:39,177:INFO:create_model() successfully completed......................................
2023-08-03 17:51:39,339:INFO:SubProcess create_model() end ==================================
2023-08-03 17:51:39,339:INFO:Creating metrics dataframe
2023-08-03 17:51:39,351:INFO:Initializing Lasso Regression
2023-08-03 17:51:39,351:INFO:Total runtime is 0.06751929124196371 minutes
2023-08-03 17:51:39,356:INFO:SubProcess create_model() called ==================================
2023-08-03 17:51:39,357:INFO:Initializing create_model()
2023-08-03 17:51:39,357:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A43A76A90>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A3EC70520>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 17:51:39,357:INFO:Checking exceptions
2023-08-03 17:51:39,357:INFO:Importing libraries
2023-08-03 17:51:39,357:INFO:Copying training dataset
2023-08-03 17:51:39,368:INFO:Defining folds
2023-08-03 17:51:39,369:INFO:Declaring metric variables
2023-08-03 17:51:39,374:INFO:Importing untrained model
2023-08-03 17:51:39,379:INFO:Lasso Regression Imported successfully
2023-08-03 17:51:39,390:INFO:Starting cross validation
2023-08-03 17:51:39,392:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 17:51:41,976:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.485e+08, tolerance: 1.720e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 17:51:41,993:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.613e+08, tolerance: 1.721e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 17:51:42,007:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.712e+08, tolerance: 1.724e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 17:51:42,013:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.298e+08, tolerance: 1.725e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 17:51:42,023:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.012e+08, tolerance: 1.711e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 17:51:42,031:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.437e+08, tolerance: 1.720e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 17:51:42,100:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.829e+08, tolerance: 1.724e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 17:51:42,130:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.839e+08, tolerance: 1.722e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 17:51:42,163:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.375e+08, tolerance: 1.745e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 17:51:42,186:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.929e+08, tolerance: 1.719e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 17:51:42,604:INFO:Calculating mean and std
2023-08-03 17:51:42,606:INFO:Creating metrics dataframe
2023-08-03 17:51:42,764:INFO:Uploading results into container
2023-08-03 17:51:42,765:INFO:Uploading model into container now
2023-08-03 17:51:42,766:INFO:_master_model_container: 2
2023-08-03 17:51:42,766:INFO:_display_container: 2
2023-08-03 17:51:42,767:INFO:Lasso(random_state=178)
2023-08-03 17:51:42,767:INFO:create_model() successfully completed......................................
2023-08-03 17:51:42,859:INFO:SubProcess create_model() end ==================================
2023-08-03 17:51:42,859:INFO:Creating metrics dataframe
2023-08-03 17:51:42,876:INFO:Initializing Ridge Regression
2023-08-03 17:51:42,877:INFO:Total runtime is 0.12628244558970134 minutes
2023-08-03 17:51:42,885:INFO:SubProcess create_model() called ==================================
2023-08-03 17:51:42,885:INFO:Initializing create_model()
2023-08-03 17:51:42,885:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A43A76A90>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A3EC70520>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 17:51:42,885:INFO:Checking exceptions
2023-08-03 17:51:42,885:INFO:Importing libraries
2023-08-03 17:51:42,886:INFO:Copying training dataset
2023-08-03 17:51:42,900:INFO:Defining folds
2023-08-03 17:51:42,900:INFO:Declaring metric variables
2023-08-03 17:51:42,905:INFO:Importing untrained model
2023-08-03 17:51:42,912:INFO:Ridge Regression Imported successfully
2023-08-03 17:51:42,923:INFO:Starting cross validation
2023-08-03 17:51:42,924:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 17:51:43,739:INFO:Calculating mean and std
2023-08-03 17:51:43,742:INFO:Creating metrics dataframe
2023-08-03 17:51:43,899:INFO:Uploading results into container
2023-08-03 17:51:43,901:INFO:Uploading model into container now
2023-08-03 17:51:43,902:INFO:_master_model_container: 3
2023-08-03 17:51:43,902:INFO:_display_container: 2
2023-08-03 17:51:43,902:INFO:Ridge(random_state=178)
2023-08-03 17:51:43,903:INFO:create_model() successfully completed......................................
2023-08-03 17:51:44,019:INFO:SubProcess create_model() end ==================================
2023-08-03 17:51:44,020:INFO:Creating metrics dataframe
2023-08-03 17:51:44,043:INFO:Initializing Elastic Net
2023-08-03 17:51:44,043:INFO:Total runtime is 0.14572743574778238 minutes
2023-08-03 17:51:44,052:INFO:SubProcess create_model() called ==================================
2023-08-03 17:51:44,052:INFO:Initializing create_model()
2023-08-03 17:51:44,053:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A43A76A90>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A3EC70520>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 17:51:44,053:INFO:Checking exceptions
2023-08-03 17:51:44,053:INFO:Importing libraries
2023-08-03 17:51:44,053:INFO:Copying training dataset
2023-08-03 17:51:44,072:INFO:Defining folds
2023-08-03 17:51:44,073:INFO:Declaring metric variables
2023-08-03 17:51:44,081:INFO:Importing untrained model
2023-08-03 17:51:44,089:INFO:Elastic Net Imported successfully
2023-08-03 17:51:44,105:INFO:Starting cross validation
2023-08-03 17:51:44,114:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 17:51:45,467:INFO:Calculating mean and std
2023-08-03 17:51:45,479:INFO:Creating metrics dataframe
2023-08-03 17:51:45,645:INFO:Uploading results into container
2023-08-03 17:51:45,647:INFO:Uploading model into container now
2023-08-03 17:51:45,647:INFO:_master_model_container: 4
2023-08-03 17:51:45,647:INFO:_display_container: 2
2023-08-03 17:51:45,647:INFO:ElasticNet(random_state=178)
2023-08-03 17:51:45,647:INFO:create_model() successfully completed......................................
2023-08-03 17:51:45,746:INFO:SubProcess create_model() end ==================================
2023-08-03 17:51:45,746:INFO:Creating metrics dataframe
2023-08-03 17:51:45,764:INFO:Initializing Least Angle Regression
2023-08-03 17:51:45,765:INFO:Total runtime is 0.17442197799682616 minutes
2023-08-03 17:51:45,770:INFO:SubProcess create_model() called ==================================
2023-08-03 17:51:45,770:INFO:Initializing create_model()
2023-08-03 17:51:45,770:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A43A76A90>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A3EC70520>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 17:51:45,770:INFO:Checking exceptions
2023-08-03 17:51:45,771:INFO:Importing libraries
2023-08-03 17:51:45,771:INFO:Copying training dataset
2023-08-03 17:51:45,782:INFO:Defining folds
2023-08-03 17:51:45,783:INFO:Declaring metric variables
2023-08-03 17:51:45,788:INFO:Importing untrained model
2023-08-03 17:51:45,794:INFO:Least Angle Regression Imported successfully
2023-08-03 17:51:45,803:INFO:Starting cross validation
2023-08-03 17:51:45,804:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 17:51:45,883:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 17:51:45,897:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 17:51:45,915:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 17:51:45,942:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 17:51:45,953:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 17:51:45,958:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 17:51:45,969:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 17:51:46,004:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 17:51:46,013:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 17:51:46,021:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 17:51:46,608:INFO:Calculating mean and std
2023-08-03 17:51:46,612:INFO:Creating metrics dataframe
2023-08-03 17:51:46,746:INFO:Uploading results into container
2023-08-03 17:51:46,747:INFO:Uploading model into container now
2023-08-03 17:51:46,747:INFO:_master_model_container: 5
2023-08-03 17:51:46,747:INFO:_display_container: 2
2023-08-03 17:51:46,748:INFO:Lars(random_state=178)
2023-08-03 17:51:46,748:INFO:create_model() successfully completed......................................
2023-08-03 17:51:46,836:INFO:SubProcess create_model() end ==================================
2023-08-03 17:51:46,837:INFO:Creating metrics dataframe
2023-08-03 17:51:46,853:INFO:Initializing Lasso Least Angle Regression
2023-08-03 17:51:46,854:INFO:Total runtime is 0.19257262150446572 minutes
2023-08-03 17:51:46,859:INFO:SubProcess create_model() called ==================================
2023-08-03 17:51:46,859:INFO:Initializing create_model()
2023-08-03 17:51:46,859:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A43A76A90>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A3EC70520>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 17:51:46,860:INFO:Checking exceptions
2023-08-03 17:51:46,860:INFO:Importing libraries
2023-08-03 17:51:46,860:INFO:Copying training dataset
2023-08-03 17:51:46,871:INFO:Defining folds
2023-08-03 17:51:46,871:INFO:Declaring metric variables
2023-08-03 17:51:46,878:INFO:Importing untrained model
2023-08-03 17:51:46,887:INFO:Lasso Least Angle Regression Imported successfully
2023-08-03 17:51:46,901:INFO:Starting cross validation
2023-08-03 17:51:46,903:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 17:51:46,986:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 17:51:47,002:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 17:51:47,018:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 17:51:47,033:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 17:51:47,050:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 17:51:47,060:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 17:51:47,073:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 17:51:47,094:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 17:51:47,121:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 17:51:47,140:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 17:51:47,710:INFO:Calculating mean and std
2023-08-03 17:51:47,713:INFO:Creating metrics dataframe
2023-08-03 17:51:47,843:INFO:Uploading results into container
2023-08-03 17:51:47,844:INFO:Uploading model into container now
2023-08-03 17:51:47,845:INFO:_master_model_container: 6
2023-08-03 17:51:47,845:INFO:_display_container: 2
2023-08-03 17:51:47,845:INFO:LassoLars(random_state=178)
2023-08-03 17:51:47,845:INFO:create_model() successfully completed......................................
2023-08-03 17:51:47,933:INFO:SubProcess create_model() end ==================================
2023-08-03 17:51:47,934:INFO:Creating metrics dataframe
2023-08-03 17:51:47,950:INFO:Initializing Orthogonal Matching Pursuit
2023-08-03 17:51:47,951:INFO:Total runtime is 0.210848859945933 minutes
2023-08-03 17:51:47,957:INFO:SubProcess create_model() called ==================================
2023-08-03 17:51:47,958:INFO:Initializing create_model()
2023-08-03 17:51:47,958:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A43A76A90>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A3EC70520>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 17:51:47,958:INFO:Checking exceptions
2023-08-03 17:51:47,958:INFO:Importing libraries
2023-08-03 17:51:47,959:INFO:Copying training dataset
2023-08-03 17:51:47,976:INFO:Defining folds
2023-08-03 17:51:47,977:INFO:Declaring metric variables
2023-08-03 17:51:47,985:INFO:Importing untrained model
2023-08-03 17:51:47,994:INFO:Orthogonal Matching Pursuit Imported successfully
2023-08-03 17:51:48,010:INFO:Starting cross validation
2023-08-03 17:51:48,013:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 17:51:48,128:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 17:51:48,147:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 17:51:48,163:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 17:51:48,171:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 17:51:48,185:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 17:51:48,196:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 17:51:48,211:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 17:51:48,232:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 17:51:48,244:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 17:51:48,254:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 17:51:48,912:INFO:Calculating mean and std
2023-08-03 17:51:48,914:INFO:Creating metrics dataframe
2023-08-03 17:51:49,021:INFO:Uploading results into container
2023-08-03 17:51:49,022:INFO:Uploading model into container now
2023-08-03 17:51:49,023:INFO:_master_model_container: 7
2023-08-03 17:51:49,023:INFO:_display_container: 2
2023-08-03 17:51:49,023:INFO:OrthogonalMatchingPursuit()
2023-08-03 17:51:49,023:INFO:create_model() successfully completed......................................
2023-08-03 17:51:49,119:INFO:SubProcess create_model() end ==================================
2023-08-03 17:51:49,120:INFO:Creating metrics dataframe
2023-08-03 17:51:49,138:INFO:Initializing Bayesian Ridge
2023-08-03 17:51:49,138:INFO:Total runtime is 0.23063394228617348 minutes
2023-08-03 17:51:49,148:INFO:SubProcess create_model() called ==================================
2023-08-03 17:51:49,148:INFO:Initializing create_model()
2023-08-03 17:51:49,149:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A43A76A90>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A3EC70520>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 17:51:49,149:INFO:Checking exceptions
2023-08-03 17:51:49,149:INFO:Importing libraries
2023-08-03 17:51:49,150:INFO:Copying training dataset
2023-08-03 17:51:49,162:INFO:Defining folds
2023-08-03 17:51:49,162:INFO:Declaring metric variables
2023-08-03 17:51:49,167:INFO:Importing untrained model
2023-08-03 17:51:49,175:INFO:Bayesian Ridge Imported successfully
2023-08-03 17:51:49,185:INFO:Starting cross validation
2023-08-03 17:51:49,186:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 17:51:49,981:INFO:Calculating mean and std
2023-08-03 17:51:49,983:INFO:Creating metrics dataframe
2023-08-03 17:51:50,096:INFO:Uploading results into container
2023-08-03 17:51:50,097:INFO:Uploading model into container now
2023-08-03 17:51:50,098:INFO:_master_model_container: 8
2023-08-03 17:51:50,098:INFO:_display_container: 2
2023-08-03 17:51:50,098:INFO:BayesianRidge()
2023-08-03 17:51:50,098:INFO:create_model() successfully completed......................................
2023-08-03 17:51:50,173:INFO:SubProcess create_model() end ==================================
2023-08-03 17:51:50,173:INFO:Creating metrics dataframe
2023-08-03 17:51:50,189:INFO:Initializing Passive Aggressive Regressor
2023-08-03 17:51:50,189:INFO:Total runtime is 0.24815263350804645 minutes
2023-08-03 17:51:50,194:INFO:SubProcess create_model() called ==================================
2023-08-03 17:51:50,195:INFO:Initializing create_model()
2023-08-03 17:51:50,195:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A43A76A90>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A3EC70520>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 17:51:50,195:INFO:Checking exceptions
2023-08-03 17:51:50,195:INFO:Importing libraries
2023-08-03 17:51:50,195:INFO:Copying training dataset
2023-08-03 17:51:50,206:INFO:Defining folds
2023-08-03 17:51:50,206:INFO:Declaring metric variables
2023-08-03 17:51:50,211:INFO:Importing untrained model
2023-08-03 17:51:50,216:INFO:Passive Aggressive Regressor Imported successfully
2023-08-03 17:51:50,227:INFO:Starting cross validation
2023-08-03 17:51:50,228:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 17:51:51,023:INFO:Calculating mean and std
2023-08-03 17:51:51,026:INFO:Creating metrics dataframe
2023-08-03 17:51:51,149:INFO:Uploading results into container
2023-08-03 17:51:51,151:INFO:Uploading model into container now
2023-08-03 17:51:51,151:INFO:_master_model_container: 9
2023-08-03 17:51:51,151:INFO:_display_container: 2
2023-08-03 17:51:51,152:INFO:PassiveAggressiveRegressor(random_state=178)
2023-08-03 17:51:51,152:INFO:create_model() successfully completed......................................
2023-08-03 17:51:51,237:INFO:SubProcess create_model() end ==================================
2023-08-03 17:51:51,237:INFO:Creating metrics dataframe
2023-08-03 17:51:51,256:INFO:Initializing Huber Regressor
2023-08-03 17:51:51,256:INFO:Total runtime is 0.2659442067146301 minutes
2023-08-03 17:51:51,261:INFO:SubProcess create_model() called ==================================
2023-08-03 17:51:51,262:INFO:Initializing create_model()
2023-08-03 17:51:51,262:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A43A76A90>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A3EC70520>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 17:51:51,262:INFO:Checking exceptions
2023-08-03 17:51:51,262:INFO:Importing libraries
2023-08-03 17:51:51,262:INFO:Copying training dataset
2023-08-03 17:51:51,274:INFO:Defining folds
2023-08-03 17:51:51,274:INFO:Declaring metric variables
2023-08-03 17:51:51,280:INFO:Importing untrained model
2023-08-03 17:51:51,286:INFO:Huber Regressor Imported successfully
2023-08-03 17:51:51,297:INFO:Starting cross validation
2023-08-03 17:51:51,298:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 17:51:51,869:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 17:51:51,891:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 17:51:51,897:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 17:51:51,907:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 17:51:51,911:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 17:51:51,926:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 17:51:51,946:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 17:51:51,966:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 17:51:52,008:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 17:51:52,037:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 17:51:52,754:INFO:Calculating mean and std
2023-08-03 17:51:52,757:INFO:Creating metrics dataframe
2023-08-03 17:51:52,893:INFO:Uploading results into container
2023-08-03 17:51:52,894:INFO:Uploading model into container now
2023-08-03 17:51:52,895:INFO:_master_model_container: 10
2023-08-03 17:51:52,895:INFO:_display_container: 2
2023-08-03 17:51:52,895:INFO:HuberRegressor()
2023-08-03 17:51:52,895:INFO:create_model() successfully completed......................................
2023-08-03 17:51:52,984:INFO:SubProcess create_model() end ==================================
2023-08-03 17:51:52,985:INFO:Creating metrics dataframe
2023-08-03 17:51:53,004:INFO:Initializing K Neighbors Regressor
2023-08-03 17:51:53,005:INFO:Total runtime is 0.29508678913116454 minutes
2023-08-03 17:51:53,010:INFO:SubProcess create_model() called ==================================
2023-08-03 17:51:53,011:INFO:Initializing create_model()
2023-08-03 17:51:53,011:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A43A76A90>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A3EC70520>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 17:51:53,012:INFO:Checking exceptions
2023-08-03 17:51:53,012:INFO:Importing libraries
2023-08-03 17:51:53,012:INFO:Copying training dataset
2023-08-03 17:51:53,028:INFO:Defining folds
2023-08-03 17:51:53,028:INFO:Declaring metric variables
2023-08-03 17:51:53,037:INFO:Importing untrained model
2023-08-03 17:51:53,046:INFO:K Neighbors Regressor Imported successfully
2023-08-03 17:51:53,063:INFO:Starting cross validation
2023-08-03 17:51:53,066:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 17:51:54,867:INFO:Calculating mean and std
2023-08-03 17:51:54,870:INFO:Creating metrics dataframe
2023-08-03 17:51:54,987:INFO:Uploading results into container
2023-08-03 17:51:54,988:INFO:Uploading model into container now
2023-08-03 17:51:54,988:INFO:_master_model_container: 11
2023-08-03 17:51:54,988:INFO:_display_container: 2
2023-08-03 17:51:54,988:INFO:KNeighborsRegressor(n_jobs=-1)
2023-08-03 17:51:54,990:INFO:create_model() successfully completed......................................
2023-08-03 17:51:55,080:INFO:SubProcess create_model() end ==================================
2023-08-03 17:51:55,080:INFO:Creating metrics dataframe
2023-08-03 17:51:55,099:INFO:Initializing Decision Tree Regressor
2023-08-03 17:51:55,099:INFO:Total runtime is 0.32999401489893593 minutes
2023-08-03 17:51:55,104:INFO:SubProcess create_model() called ==================================
2023-08-03 17:51:55,105:INFO:Initializing create_model()
2023-08-03 17:51:55,105:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A43A76A90>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A3EC70520>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 17:51:55,105:INFO:Checking exceptions
2023-08-03 17:51:55,105:INFO:Importing libraries
2023-08-03 17:51:55,106:INFO:Copying training dataset
2023-08-03 17:51:55,116:INFO:Defining folds
2023-08-03 17:51:55,117:INFO:Declaring metric variables
2023-08-03 17:51:55,124:INFO:Importing untrained model
2023-08-03 17:51:55,131:INFO:Decision Tree Regressor Imported successfully
2023-08-03 17:51:55,147:INFO:Starting cross validation
2023-08-03 17:51:55,149:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 17:51:56,274:INFO:Calculating mean and std
2023-08-03 17:51:56,278:INFO:Creating metrics dataframe
2023-08-03 17:51:56,460:INFO:Uploading results into container
2023-08-03 17:51:56,462:INFO:Uploading model into container now
2023-08-03 17:51:56,463:INFO:_master_model_container: 12
2023-08-03 17:51:56,463:INFO:_display_container: 2
2023-08-03 17:51:56,463:INFO:DecisionTreeRegressor(random_state=178)
2023-08-03 17:51:56,463:INFO:create_model() successfully completed......................................
2023-08-03 17:51:56,562:INFO:SubProcess create_model() end ==================================
2023-08-03 17:51:56,562:INFO:Creating metrics dataframe
2023-08-03 17:51:56,581:INFO:Initializing Random Forest Regressor
2023-08-03 17:51:56,581:INFO:Total runtime is 0.3546919663747151 minutes
2023-08-03 17:51:56,588:INFO:SubProcess create_model() called ==================================
2023-08-03 17:51:56,588:INFO:Initializing create_model()
2023-08-03 17:51:56,588:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A43A76A90>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A3EC70520>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 17:51:56,588:INFO:Checking exceptions
2023-08-03 17:51:56,589:INFO:Importing libraries
2023-08-03 17:51:56,589:INFO:Copying training dataset
2023-08-03 17:51:56,601:INFO:Defining folds
2023-08-03 17:51:56,601:INFO:Declaring metric variables
2023-08-03 17:51:56,607:INFO:Importing untrained model
2023-08-03 17:51:56,613:INFO:Random Forest Regressor Imported successfully
2023-08-03 17:51:56,625:INFO:Starting cross validation
2023-08-03 17:51:56,626:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 17:52:05,727:WARNING:C:\Users\patta\AppData\Roaming\Python\Python39\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.08s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-08-03 17:52:06,924:INFO:Calculating mean and std
2023-08-03 17:52:06,926:INFO:Creating metrics dataframe
2023-08-03 17:52:07,043:INFO:Uploading results into container
2023-08-03 17:52:07,045:INFO:Uploading model into container now
2023-08-03 17:52:07,045:INFO:_master_model_container: 13
2023-08-03 17:52:07,045:INFO:_display_container: 2
2023-08-03 17:52:07,046:INFO:RandomForestRegressor(n_jobs=-1, random_state=178)
2023-08-03 17:52:07,046:INFO:create_model() successfully completed......................................
2023-08-03 17:52:07,122:INFO:SubProcess create_model() end ==================================
2023-08-03 17:52:07,123:INFO:Creating metrics dataframe
2023-08-03 17:52:07,142:INFO:Initializing Extra Trees Regressor
2023-08-03 17:52:07,142:INFO:Total runtime is 0.5307135979334513 minutes
2023-08-03 17:52:07,147:INFO:SubProcess create_model() called ==================================
2023-08-03 17:52:07,147:INFO:Initializing create_model()
2023-08-03 17:52:07,147:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A43A76A90>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A3EC70520>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 17:52:07,147:INFO:Checking exceptions
2023-08-03 17:52:07,147:INFO:Importing libraries
2023-08-03 17:52:07,148:INFO:Copying training dataset
2023-08-03 17:52:07,158:INFO:Defining folds
2023-08-03 17:52:07,158:INFO:Declaring metric variables
2023-08-03 17:52:07,162:INFO:Importing untrained model
2023-08-03 17:52:07,167:INFO:Extra Trees Regressor Imported successfully
2023-08-03 17:52:07,178:INFO:Starting cross validation
2023-08-03 17:52:07,179:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 17:52:13,593:WARNING:C:\Users\patta\AppData\Roaming\Python\Python39\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 3.50s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-08-03 17:52:13,739:WARNING:C:\Users\patta\AppData\Roaming\Python\Python39\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 4.34s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-08-03 17:52:15,260:INFO:Calculating mean and std
2023-08-03 17:52:15,262:INFO:Creating metrics dataframe
2023-08-03 17:52:15,386:INFO:Uploading results into container
2023-08-03 17:52:15,388:INFO:Uploading model into container now
2023-08-03 17:52:15,389:INFO:_master_model_container: 14
2023-08-03 17:52:15,389:INFO:_display_container: 2
2023-08-03 17:52:15,389:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=178)
2023-08-03 17:52:15,389:INFO:create_model() successfully completed......................................
2023-08-03 17:52:15,475:INFO:SubProcess create_model() end ==================================
2023-08-03 17:52:15,475:INFO:Creating metrics dataframe
2023-08-03 17:52:15,494:INFO:Initializing AdaBoost Regressor
2023-08-03 17:52:15,495:INFO:Total runtime is 0.6699313839276632 minutes
2023-08-03 17:52:15,500:INFO:SubProcess create_model() called ==================================
2023-08-03 17:52:15,501:INFO:Initializing create_model()
2023-08-03 17:52:15,501:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A43A76A90>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A3EC70520>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 17:52:15,501:INFO:Checking exceptions
2023-08-03 17:52:15,501:INFO:Importing libraries
2023-08-03 17:52:15,501:INFO:Copying training dataset
2023-08-03 17:52:15,511:INFO:Defining folds
2023-08-03 17:52:15,511:INFO:Declaring metric variables
2023-08-03 17:52:15,516:INFO:Importing untrained model
2023-08-03 17:52:15,521:INFO:AdaBoost Regressor Imported successfully
2023-08-03 17:52:15,531:INFO:Starting cross validation
2023-08-03 17:52:15,532:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 17:52:17,313:INFO:Calculating mean and std
2023-08-03 17:52:17,315:INFO:Creating metrics dataframe
2023-08-03 17:52:17,471:INFO:Uploading results into container
2023-08-03 17:52:17,472:INFO:Uploading model into container now
2023-08-03 17:52:17,472:INFO:_master_model_container: 15
2023-08-03 17:52:17,473:INFO:_display_container: 2
2023-08-03 17:52:17,473:INFO:AdaBoostRegressor(random_state=178)
2023-08-03 17:52:17,473:INFO:create_model() successfully completed......................................
2023-08-03 17:52:17,561:INFO:SubProcess create_model() end ==================================
2023-08-03 17:52:17,561:INFO:Creating metrics dataframe
2023-08-03 17:52:17,583:INFO:Initializing Gradient Boosting Regressor
2023-08-03 17:52:17,584:INFO:Total runtime is 0.7047329982121785 minutes
2023-08-03 17:52:17,588:INFO:SubProcess create_model() called ==================================
2023-08-03 17:52:17,588:INFO:Initializing create_model()
2023-08-03 17:52:17,588:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A43A76A90>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A3EC70520>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 17:52:17,589:INFO:Checking exceptions
2023-08-03 17:52:17,589:INFO:Importing libraries
2023-08-03 17:52:17,589:INFO:Copying training dataset
2023-08-03 17:52:17,601:INFO:Defining folds
2023-08-03 17:52:17,601:INFO:Declaring metric variables
2023-08-03 17:52:17,607:INFO:Importing untrained model
2023-08-03 17:52:17,612:INFO:Gradient Boosting Regressor Imported successfully
2023-08-03 17:52:17,622:INFO:Starting cross validation
2023-08-03 17:52:17,623:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 17:52:21,091:INFO:Calculating mean and std
2023-08-03 17:52:21,094:INFO:Creating metrics dataframe
2023-08-03 17:52:21,247:INFO:Uploading results into container
2023-08-03 17:52:21,248:INFO:Uploading model into container now
2023-08-03 17:52:21,248:INFO:_master_model_container: 16
2023-08-03 17:52:21,248:INFO:_display_container: 2
2023-08-03 17:52:21,249:INFO:GradientBoostingRegressor(random_state=178)
2023-08-03 17:52:21,249:INFO:create_model() successfully completed......................................
2023-08-03 17:52:21,336:INFO:SubProcess create_model() end ==================================
2023-08-03 17:52:21,336:INFO:Creating metrics dataframe
2023-08-03 17:52:21,356:INFO:Initializing Extreme Gradient Boosting
2023-08-03 17:52:21,357:INFO:Total runtime is 0.7676304300626119 minutes
2023-08-03 17:52:21,362:INFO:SubProcess create_model() called ==================================
2023-08-03 17:52:21,364:INFO:Initializing create_model()
2023-08-03 17:52:21,364:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A43A76A90>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A3EC70520>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 17:52:21,364:INFO:Checking exceptions
2023-08-03 17:52:21,364:INFO:Importing libraries
2023-08-03 17:52:21,364:INFO:Copying training dataset
2023-08-03 17:52:21,375:INFO:Defining folds
2023-08-03 17:52:21,375:INFO:Declaring metric variables
2023-08-03 17:52:21,381:INFO:Importing untrained model
2023-08-03 17:52:21,387:INFO:Extreme Gradient Boosting Imported successfully
2023-08-03 17:52:21,397:INFO:Starting cross validation
2023-08-03 17:52:21,399:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 17:52:25,612:INFO:Calculating mean and std
2023-08-03 17:52:25,615:INFO:Creating metrics dataframe
2023-08-03 17:52:25,782:INFO:Uploading results into container
2023-08-03 17:52:25,783:INFO:Uploading model into container now
2023-08-03 17:52:25,783:INFO:_master_model_container: 17
2023-08-03 17:52:25,784:INFO:_display_container: 2
2023-08-03 17:52:25,785:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=178, ...)
2023-08-03 17:52:25,785:INFO:create_model() successfully completed......................................
2023-08-03 17:52:25,862:INFO:SubProcess create_model() end ==================================
2023-08-03 17:52:25,862:INFO:Creating metrics dataframe
2023-08-03 17:52:25,883:INFO:Initializing Light Gradient Boosting Machine
2023-08-03 17:52:25,883:INFO:Total runtime is 0.8430639664332071 minutes
2023-08-03 17:52:25,889:INFO:SubProcess create_model() called ==================================
2023-08-03 17:52:25,890:INFO:Initializing create_model()
2023-08-03 17:52:25,890:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A43A76A90>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A3EC70520>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 17:52:25,890:INFO:Checking exceptions
2023-08-03 17:52:25,890:INFO:Importing libraries
2023-08-03 17:52:25,890:INFO:Copying training dataset
2023-08-03 17:52:25,904:INFO:Defining folds
2023-08-03 17:52:25,904:INFO:Declaring metric variables
2023-08-03 17:52:25,911:INFO:Importing untrained model
2023-08-03 17:52:25,917:INFO:Light Gradient Boosting Machine Imported successfully
2023-08-03 17:52:25,928:INFO:Starting cross validation
2023-08-03 17:52:25,930:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 17:52:36,049:INFO:Calculating mean and std
2023-08-03 17:52:36,051:INFO:Creating metrics dataframe
2023-08-03 17:52:36,232:INFO:Uploading results into container
2023-08-03 17:52:36,233:INFO:Uploading model into container now
2023-08-03 17:52:36,234:INFO:_master_model_container: 18
2023-08-03 17:52:36,234:INFO:_display_container: 2
2023-08-03 17:52:36,234:INFO:LGBMRegressor(n_jobs=-1, random_state=178)
2023-08-03 17:52:36,235:INFO:create_model() successfully completed......................................
2023-08-03 17:52:36,326:INFO:SubProcess create_model() end ==================================
2023-08-03 17:52:36,327:INFO:Creating metrics dataframe
2023-08-03 17:52:36,345:INFO:Initializing Dummy Regressor
2023-08-03 17:52:36,345:INFO:Total runtime is 1.0174298842748006 minutes
2023-08-03 17:52:36,350:INFO:SubProcess create_model() called ==================================
2023-08-03 17:52:36,351:INFO:Initializing create_model()
2023-08-03 17:52:36,351:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A43A76A90>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A3EC70520>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 17:52:36,351:INFO:Checking exceptions
2023-08-03 17:52:36,351:INFO:Importing libraries
2023-08-03 17:52:36,351:INFO:Copying training dataset
2023-08-03 17:52:36,362:INFO:Defining folds
2023-08-03 17:52:36,362:INFO:Declaring metric variables
2023-08-03 17:52:36,367:INFO:Importing untrained model
2023-08-03 17:52:36,372:INFO:Dummy Regressor Imported successfully
2023-08-03 17:52:36,381:INFO:Starting cross validation
2023-08-03 17:52:36,382:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 17:52:37,712:INFO:Calculating mean and std
2023-08-03 17:52:37,714:INFO:Creating metrics dataframe
2023-08-03 17:52:37,899:INFO:Uploading results into container
2023-08-03 17:52:37,900:INFO:Uploading model into container now
2023-08-03 17:52:37,901:INFO:_master_model_container: 19
2023-08-03 17:52:37,901:INFO:_display_container: 2
2023-08-03 17:52:37,901:INFO:DummyRegressor()
2023-08-03 17:52:37,901:INFO:create_model() successfully completed......................................
2023-08-03 17:52:37,978:INFO:SubProcess create_model() end ==================================
2023-08-03 17:52:37,978:INFO:Creating metrics dataframe
2023-08-03 17:52:38,012:INFO:Initializing create_model()
2023-08-03 17:52:38,012:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A43A76A90>, estimator=GradientBoostingRegressor(random_state=178), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-08-03 17:52:38,012:INFO:Checking exceptions
2023-08-03 17:52:38,015:INFO:Importing libraries
2023-08-03 17:52:38,015:INFO:Copying training dataset
2023-08-03 17:52:38,024:INFO:Defining folds
2023-08-03 17:52:38,025:INFO:Declaring metric variables
2023-08-03 17:52:38,025:INFO:Importing untrained model
2023-08-03 17:52:38,025:INFO:Declaring custom model
2023-08-03 17:52:38,026:INFO:Gradient Boosting Regressor Imported successfully
2023-08-03 17:52:38,027:INFO:Cross validation set to False
2023-08-03 17:52:38,027:INFO:Fitting Model
2023-08-03 17:52:40,062:INFO:GradientBoostingRegressor(random_state=178)
2023-08-03 17:52:40,062:INFO:create_model() successfully completed......................................
2023-08-03 17:52:40,190:INFO:_master_model_container: 19
2023-08-03 17:52:40,190:INFO:_display_container: 2
2023-08-03 17:52:40,191:INFO:GradientBoostingRegressor(random_state=178)
2023-08-03 17:52:40,191:INFO:compare_models() successfully completed......................................
2023-08-03 18:23:33,601:INFO:PyCaret RegressionExperiment
2023-08-03 18:23:33,601:INFO:Logging name: reg-default-name
2023-08-03 18:23:33,601:INFO:ML Usecase: MLUsecase.REGRESSION
2023-08-03 18:23:33,601:INFO:version 3.0.4
2023-08-03 18:23:33,601:INFO:Initializing setup()
2023-08-03 18:23:33,601:INFO:self.USI: f7f9
2023-08-03 18:23:33,601:INFO:self._variable_keys: {'fold_shuffle_param', 'data', 'memory', 'gpu_n_jobs_param', '_available_plots', 'n_jobs_param', 'y_train', '_ml_usecase', 'logging_param', 'y', 'fold_generator', 'transform_target_param', 'X_train', 'pipeline', 'X', 'USI', 'X_test', 'gpu_param', 'fold_groups_param', 'log_plots_param', 'exp_name_log', 'y_test', 'exp_id', 'idx', 'seed', 'target_param', 'html_param'}
2023-08-03 18:23:33,601:INFO:Checking environment
2023-08-03 18:23:33,602:INFO:python_version: 3.9.13
2023-08-03 18:23:33,602:INFO:python_build: ('main', 'Aug 25 2022 23:51:50')
2023-08-03 18:23:33,602:INFO:machine: AMD64
2023-08-03 18:23:33,602:INFO:platform: Windows-10-10.0.22621-SP0
2023-08-03 18:23:33,602:INFO:Memory: svmem(total=34014814208, available=18976665600, percent=44.2, used=15038148608, free=18976665600)
2023-08-03 18:23:33,602:INFO:Physical Core: 14
2023-08-03 18:23:33,602:INFO:Logical Core: 20
2023-08-03 18:23:33,602:INFO:Checking libraries
2023-08-03 18:23:33,602:INFO:System:
2023-08-03 18:23:33,602:INFO:    python: 3.9.13 (main, Aug 25 2022, 23:51:50) [MSC v.1916 64 bit (AMD64)]
2023-08-03 18:23:33,602:INFO:executable: C:\ProgramData\Anaconda3\python.exe
2023-08-03 18:23:33,602:INFO:   machine: Windows-10-10.0.22621-SP0
2023-08-03 18:23:33,602:INFO:PyCaret required dependencies:
2023-08-03 18:23:33,602:INFO:                 pip: 22.2.2
2023-08-03 18:23:33,602:INFO:          setuptools: 63.4.1
2023-08-03 18:23:33,602:INFO:             pycaret: 3.0.4
2023-08-03 18:23:33,602:INFO:             IPython: 7.31.1
2023-08-03 18:23:33,602:INFO:          ipywidgets: 7.6.5
2023-08-03 18:23:33,602:INFO:                tqdm: 4.64.1
2023-08-03 18:23:33,602:INFO:               numpy: 1.21.5
2023-08-03 18:23:33,602:INFO:              pandas: 1.4.4
2023-08-03 18:23:33,602:INFO:              jinja2: 2.11.3
2023-08-03 18:23:33,602:INFO:               scipy: 1.9.1
2023-08-03 18:23:33,602:INFO:              joblib: 1.1.0
2023-08-03 18:23:33,602:INFO:             sklearn: 1.0.2
2023-08-03 18:23:33,602:INFO:                pyod: 1.1.0
2023-08-03 18:23:33,602:INFO:            imblearn: 0.11.0
2023-08-03 18:23:33,602:INFO:   category_encoders: 2.6.1
2023-08-03 18:23:33,602:INFO:            lightgbm: 4.0.0
2023-08-03 18:23:33,602:INFO:               numba: 0.55.1
2023-08-03 18:23:33,602:INFO:            requests: 2.28.1
2023-08-03 18:23:33,602:INFO:          matplotlib: 3.5.2
2023-08-03 18:23:33,602:INFO:          scikitplot: 0.3.7
2023-08-03 18:23:33,602:INFO:         yellowbrick: 1.5
2023-08-03 18:23:33,603:INFO:              plotly: 5.9.0
2023-08-03 18:23:33,603:INFO:    plotly-resampler: Not installed
2023-08-03 18:23:33,603:INFO:             kaleido: 0.2.1
2023-08-03 18:23:33,603:INFO:           schemdraw: 0.15
2023-08-03 18:23:33,603:INFO:         statsmodels: 0.13.2
2023-08-03 18:23:33,603:INFO:              sktime: 0.21.0
2023-08-03 18:23:33,603:INFO:               tbats: 1.1.3
2023-08-03 18:23:33,603:INFO:            pmdarima: 2.0.3
2023-08-03 18:23:33,603:INFO:              psutil: 5.9.0
2023-08-03 18:23:33,603:INFO:          markupsafe: 2.0.1
2023-08-03 18:23:33,603:INFO:             pickle5: Not installed
2023-08-03 18:23:33,603:INFO:         cloudpickle: 2.0.0
2023-08-03 18:23:33,603:INFO:         deprecation: 2.1.0
2023-08-03 18:23:33,603:INFO:              xxhash: 3.2.0
2023-08-03 18:23:33,603:INFO:           wurlitzer: Not installed
2023-08-03 18:23:33,603:INFO:PyCaret optional dependencies:
2023-08-03 18:23:33,603:INFO:                shap: Not installed
2023-08-03 18:23:33,603:INFO:           interpret: Not installed
2023-08-03 18:23:33,603:INFO:                umap: Not installed
2023-08-03 18:23:33,603:INFO:    pandas_profiling: Not installed
2023-08-03 18:23:33,603:INFO:  explainerdashboard: Not installed
2023-08-03 18:23:33,603:INFO:             autoviz: Not installed
2023-08-03 18:23:33,603:INFO:           fairlearn: Not installed
2023-08-03 18:23:33,603:INFO:          deepchecks: Not installed
2023-08-03 18:23:33,603:INFO:             xgboost: 1.7.6
2023-08-03 18:23:33,603:INFO:            catboost: Not installed
2023-08-03 18:23:33,603:INFO:              kmodes: Not installed
2023-08-03 18:23:33,603:INFO:             mlxtend: Not installed
2023-08-03 18:23:33,603:INFO:       statsforecast: Not installed
2023-08-03 18:23:33,603:INFO:        tune_sklearn: Not installed
2023-08-03 18:23:33,603:INFO:                 ray: Not installed
2023-08-03 18:23:33,603:INFO:            hyperopt: Not installed
2023-08-03 18:23:33,603:INFO:              optuna: Not installed
2023-08-03 18:23:33,603:INFO:               skopt: Not installed
2023-08-03 18:23:33,603:INFO:              mlflow: Not installed
2023-08-03 18:23:33,603:INFO:              gradio: Not installed
2023-08-03 18:23:33,604:INFO:             fastapi: Not installed
2023-08-03 18:23:33,604:INFO:             uvicorn: Not installed
2023-08-03 18:23:33,604:INFO:              m2cgen: Not installed
2023-08-03 18:23:33,604:INFO:           evidently: Not installed
2023-08-03 18:23:33,604:INFO:               fugue: Not installed
2023-08-03 18:23:33,604:INFO:           streamlit: Not installed
2023-08-03 18:23:33,604:INFO:             prophet: Not installed
2023-08-03 18:23:33,604:INFO:None
2023-08-03 18:23:33,604:INFO:Set up data.
2023-08-03 18:23:33,615:INFO:Set up train/test split.
2023-08-03 18:23:33,621:INFO:Set up index.
2023-08-03 18:23:33,621:INFO:Set up folding strategy.
2023-08-03 18:23:33,621:INFO:Assigning column types.
2023-08-03 18:23:33,627:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-08-03 18:23:33,627:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-03 18:23:33,632:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-03 18:23:33,636:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-03 18:23:33,694:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 18:23:33,746:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-03 18:23:33,746:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 18:23:33,750:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 18:23:33,750:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-08-03 18:23:33,756:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-03 18:23:33,762:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-03 18:23:33,816:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 18:23:33,854:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-03 18:23:33,854:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 18:23:33,856:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 18:23:33,857:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-08-03 18:23:33,860:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-03 18:23:33,864:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-03 18:23:33,919:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 18:23:33,963:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-03 18:23:33,964:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 18:23:33,966:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 18:23:33,971:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-08-03 18:23:33,974:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-03 18:23:34,032:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 18:23:34,074:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-03 18:23:34,074:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 18:23:34,077:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 18:23:34,077:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-08-03 18:23:34,086:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-03 18:23:34,169:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 18:23:34,280:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-03 18:23:34,281:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 18:23:34,287:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 18:23:34,309:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-08-03 18:23:34,450:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 18:23:34,560:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-03 18:23:34,561:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 18:23:34,567:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 18:23:34,568:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-08-03 18:23:34,730:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 18:23:34,839:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-03 18:23:34,840:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 18:23:34,846:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 18:23:35,008:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 18:23:35,115:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-08-03 18:23:35,116:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 18:23:35,122:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 18:23:35,123:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-08-03 18:23:35,282:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 18:23:35,389:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 18:23:35,395:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 18:23:35,557:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-08-03 18:23:35,666:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 18:23:35,672:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 18:23:35,672:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-08-03 18:23:35,946:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 18:23:35,952:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 18:23:36,220:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 18:23:36,226:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 18:23:36,228:INFO:Preparing preprocessing pipeline...
2023-08-03 18:23:36,228:INFO:Set up simple imputation.
2023-08-03 18:23:36,255:INFO:Finished creating preprocessing pipeline.
2023-08-03 18:23:36,261:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\patta\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['clonesize', 'honeybee', 'bumbles',
                                             'andrena', 'osmia',
                                             'MaxOfUpperTRange',
                                             'MinOfUpperTRange',
                                             'AverageOfUpperTRange',
                                             'MaxOfLowerTRange',
                                             'MinOfLowerTRange',
                                             'AverageOfLowerTRange',
                                             'RainingDays',
                                             'AverageRainingDays', 'fruitset',
                                             'fruitmass', 'seeds'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-08-03 18:23:36,261:INFO:Creating final display dataframe.
2023-08-03 18:23:36,357:INFO:Setup _display_container:                     Description             Value
0                    Session id              1071
1                        Target             yield
2                   Target type        Regression
3           Original data shape       (15289, 17)
4        Transformed data shape       (15289, 17)
5   Transformed train set shape       (10702, 17)
6    Transformed test set shape        (4587, 17)
7              Numeric features                16
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              f7f9
2023-08-03 18:23:36,629:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 18:23:36,635:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 18:23:36,904:INFO:Soft dependency imported: xgboost: 1.7.6
2023-08-03 18:23:36,911:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-08-03 18:23:36,912:INFO:setup() successfully completed in 3.38s...............
2023-08-03 18:23:37,041:INFO:Initializing compare_models()
2023-08-03 18:23:37,041:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3E7E2CA0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000020A3E7E2CA0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-08-03 18:23:37,041:INFO:Checking exceptions
2023-08-03 18:23:37,046:INFO:Preparing display monitor
2023-08-03 18:23:37,097:INFO:Initializing Linear Regression
2023-08-03 18:23:37,097:INFO:Total runtime is 0.0 minutes
2023-08-03 18:23:37,103:INFO:SubProcess create_model() called ==================================
2023-08-03 18:23:37,103:INFO:Initializing create_model()
2023-08-03 18:23:37,104:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3E7E2CA0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A440FAD90>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 18:23:37,104:INFO:Checking exceptions
2023-08-03 18:23:37,104:INFO:Importing libraries
2023-08-03 18:23:37,104:INFO:Copying training dataset
2023-08-03 18:23:37,115:INFO:Defining folds
2023-08-03 18:23:37,116:INFO:Declaring metric variables
2023-08-03 18:23:37,120:INFO:Importing untrained model
2023-08-03 18:23:37,126:INFO:Linear Regression Imported successfully
2023-08-03 18:23:37,135:INFO:Starting cross validation
2023-08-03 18:23:37,136:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 18:23:41,000:INFO:Calculating mean and std
2023-08-03 18:23:41,003:INFO:Creating metrics dataframe
2023-08-03 18:23:41,242:INFO:Uploading results into container
2023-08-03 18:23:41,243:INFO:Uploading model into container now
2023-08-03 18:23:41,243:INFO:_master_model_container: 1
2023-08-03 18:23:41,243:INFO:_display_container: 2
2023-08-03 18:23:41,244:INFO:LinearRegression(n_jobs=-1)
2023-08-03 18:23:41,244:INFO:create_model() successfully completed......................................
2023-08-03 18:23:41,343:INFO:SubProcess create_model() end ==================================
2023-08-03 18:23:41,343:INFO:Creating metrics dataframe
2023-08-03 18:23:41,357:INFO:Initializing Lasso Regression
2023-08-03 18:23:41,357:INFO:Total runtime is 0.07099463939666747 minutes
2023-08-03 18:23:41,362:INFO:SubProcess create_model() called ==================================
2023-08-03 18:23:41,362:INFO:Initializing create_model()
2023-08-03 18:23:41,362:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3E7E2CA0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A440FAD90>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 18:23:41,363:INFO:Checking exceptions
2023-08-03 18:23:41,363:INFO:Importing libraries
2023-08-03 18:23:41,363:INFO:Copying training dataset
2023-08-03 18:23:41,374:INFO:Defining folds
2023-08-03 18:23:41,374:INFO:Declaring metric variables
2023-08-03 18:23:41,379:INFO:Importing untrained model
2023-08-03 18:23:41,384:INFO:Lasso Regression Imported successfully
2023-08-03 18:23:41,395:INFO:Starting cross validation
2023-08-03 18:23:41,396:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 18:23:43,856:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.514e+08, tolerance: 1.700e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 18:23:43,891:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.651e+08, tolerance: 1.682e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 18:23:43,954:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.612e+08, tolerance: 1.705e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 18:23:44,025:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.813e+08, tolerance: 1.687e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 18:23:44,057:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.571e+08, tolerance: 1.693e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 18:23:44,061:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.205e+08, tolerance: 1.686e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 18:23:44,094:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.384e+08, tolerance: 1.693e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 18:23:44,113:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.531e+08, tolerance: 1.696e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 18:23:44,151:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.550e+08, tolerance: 1.694e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 18:23:44,161:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:647: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 7.617e+08, tolerance: 1.688e+06
  model = cd_fast.enet_coordinate_descent(

2023-08-03 18:23:44,977:INFO:Calculating mean and std
2023-08-03 18:23:44,979:INFO:Creating metrics dataframe
2023-08-03 18:23:45,187:INFO:Uploading results into container
2023-08-03 18:23:45,188:INFO:Uploading model into container now
2023-08-03 18:23:45,188:INFO:_master_model_container: 2
2023-08-03 18:23:45,189:INFO:_display_container: 2
2023-08-03 18:23:45,189:INFO:Lasso(random_state=1071)
2023-08-03 18:23:45,189:INFO:create_model() successfully completed......................................
2023-08-03 18:23:45,280:INFO:SubProcess create_model() end ==================================
2023-08-03 18:23:45,280:INFO:Creating metrics dataframe
2023-08-03 18:23:45,295:INFO:Initializing Ridge Regression
2023-08-03 18:23:45,295:INFO:Total runtime is 0.13662999073664345 minutes
2023-08-03 18:23:45,302:INFO:SubProcess create_model() called ==================================
2023-08-03 18:23:45,303:INFO:Initializing create_model()
2023-08-03 18:23:45,303:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3E7E2CA0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A440FAD90>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 18:23:45,303:INFO:Checking exceptions
2023-08-03 18:23:45,303:INFO:Importing libraries
2023-08-03 18:23:45,303:INFO:Copying training dataset
2023-08-03 18:23:45,314:INFO:Defining folds
2023-08-03 18:23:45,314:INFO:Declaring metric variables
2023-08-03 18:23:45,320:INFO:Importing untrained model
2023-08-03 18:23:45,325:INFO:Ridge Regression Imported successfully
2023-08-03 18:23:45,335:INFO:Starting cross validation
2023-08-03 18:23:45,337:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 18:23:46,610:INFO:Calculating mean and std
2023-08-03 18:23:46,614:INFO:Creating metrics dataframe
2023-08-03 18:23:46,825:INFO:Uploading results into container
2023-08-03 18:23:46,826:INFO:Uploading model into container now
2023-08-03 18:23:46,827:INFO:_master_model_container: 3
2023-08-03 18:23:46,827:INFO:_display_container: 2
2023-08-03 18:23:46,827:INFO:Ridge(random_state=1071)
2023-08-03 18:23:46,827:INFO:create_model() successfully completed......................................
2023-08-03 18:23:46,920:INFO:SubProcess create_model() end ==================================
2023-08-03 18:23:46,920:INFO:Creating metrics dataframe
2023-08-03 18:23:46,937:INFO:Initializing Elastic Net
2023-08-03 18:23:46,937:INFO:Total runtime is 0.16400202115376789 minutes
2023-08-03 18:23:46,942:INFO:SubProcess create_model() called ==================================
2023-08-03 18:23:46,943:INFO:Initializing create_model()
2023-08-03 18:23:46,943:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3E7E2CA0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A440FAD90>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 18:23:46,943:INFO:Checking exceptions
2023-08-03 18:23:46,943:INFO:Importing libraries
2023-08-03 18:23:46,943:INFO:Copying training dataset
2023-08-03 18:23:46,955:INFO:Defining folds
2023-08-03 18:23:46,955:INFO:Declaring metric variables
2023-08-03 18:23:46,962:INFO:Importing untrained model
2023-08-03 18:23:46,969:INFO:Elastic Net Imported successfully
2023-08-03 18:23:46,987:INFO:Starting cross validation
2023-08-03 18:23:46,989:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 18:23:48,114:INFO:Calculating mean and std
2023-08-03 18:23:48,126:INFO:Creating metrics dataframe
2023-08-03 18:23:48,294:INFO:Uploading results into container
2023-08-03 18:23:48,294:INFO:Uploading model into container now
2023-08-03 18:23:48,295:INFO:_master_model_container: 4
2023-08-03 18:23:48,295:INFO:_display_container: 2
2023-08-03 18:23:48,295:INFO:ElasticNet(random_state=1071)
2023-08-03 18:23:48,295:INFO:create_model() successfully completed......................................
2023-08-03 18:23:48,369:INFO:SubProcess create_model() end ==================================
2023-08-03 18:23:48,369:INFO:Creating metrics dataframe
2023-08-03 18:23:48,379:INFO:Initializing Least Angle Regression
2023-08-03 18:23:48,379:INFO:Total runtime is 0.1880374272664388 minutes
2023-08-03 18:23:48,383:INFO:SubProcess create_model() called ==================================
2023-08-03 18:23:48,383:INFO:Initializing create_model()
2023-08-03 18:23:48,384:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3E7E2CA0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A440FAD90>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 18:23:48,384:INFO:Checking exceptions
2023-08-03 18:23:48,384:INFO:Importing libraries
2023-08-03 18:23:48,384:INFO:Copying training dataset
2023-08-03 18:23:48,391:INFO:Defining folds
2023-08-03 18:23:48,391:INFO:Declaring metric variables
2023-08-03 18:23:48,394:INFO:Importing untrained model
2023-08-03 18:23:48,397:INFO:Least Angle Regression Imported successfully
2023-08-03 18:23:48,407:INFO:Starting cross validation
2023-08-03 18:23:48,409:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 18:23:48,467:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 18:23:48,474:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 18:23:48,484:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 18:23:48,490:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 18:23:48,493:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 18:23:48,501:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 18:23:48,514:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 18:23:48,516:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 18:23:48,524:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 18:23:48,541:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 18:23:49,619:INFO:Calculating mean and std
2023-08-03 18:23:49,622:INFO:Creating metrics dataframe
2023-08-03 18:23:49,880:INFO:Uploading results into container
2023-08-03 18:23:49,882:INFO:Uploading model into container now
2023-08-03 18:23:49,882:INFO:_master_model_container: 5
2023-08-03 18:23:49,883:INFO:_display_container: 2
2023-08-03 18:23:49,883:INFO:Lars(random_state=1071)
2023-08-03 18:23:49,884:INFO:create_model() successfully completed......................................
2023-08-03 18:23:49,971:INFO:SubProcess create_model() end ==================================
2023-08-03 18:23:49,971:INFO:Creating metrics dataframe
2023-08-03 18:23:49,988:INFO:Initializing Lasso Least Angle Regression
2023-08-03 18:23:49,988:INFO:Total runtime is 0.21485400994618734 minutes
2023-08-03 18:23:49,993:INFO:SubProcess create_model() called ==================================
2023-08-03 18:23:49,994:INFO:Initializing create_model()
2023-08-03 18:23:49,994:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3E7E2CA0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A440FAD90>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 18:23:49,994:INFO:Checking exceptions
2023-08-03 18:23:49,994:INFO:Importing libraries
2023-08-03 18:23:49,995:INFO:Copying training dataset
2023-08-03 18:23:50,005:INFO:Defining folds
2023-08-03 18:23:50,006:INFO:Declaring metric variables
2023-08-03 18:23:50,013:INFO:Importing untrained model
2023-08-03 18:23:50,020:INFO:Lasso Least Angle Regression Imported successfully
2023-08-03 18:23:50,034:INFO:Starting cross validation
2023-08-03 18:23:50,036:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 18:23:50,138:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 18:23:50,153:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 18:23:50,172:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 18:23:50,189:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 18:23:50,206:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 18:23:50,220:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 18:23:50,230:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 18:23:50,255:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 18:23:50,275:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 18:23:50,285:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-08-03 18:23:51,517:INFO:Calculating mean and std
2023-08-03 18:23:51,520:INFO:Creating metrics dataframe
2023-08-03 18:23:51,740:INFO:Uploading results into container
2023-08-03 18:23:51,742:INFO:Uploading model into container now
2023-08-03 18:23:51,743:INFO:_master_model_container: 6
2023-08-03 18:23:51,744:INFO:_display_container: 2
2023-08-03 18:23:51,745:INFO:LassoLars(random_state=1071)
2023-08-03 18:23:51,745:INFO:create_model() successfully completed......................................
2023-08-03 18:23:51,843:INFO:SubProcess create_model() end ==================================
2023-08-03 18:23:51,843:INFO:Creating metrics dataframe
2023-08-03 18:23:51,860:INFO:Initializing Orthogonal Matching Pursuit
2023-08-03 18:23:51,860:INFO:Total runtime is 0.24605034192403158 minutes
2023-08-03 18:23:51,866:INFO:SubProcess create_model() called ==================================
2023-08-03 18:23:51,867:INFO:Initializing create_model()
2023-08-03 18:23:51,867:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3E7E2CA0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A440FAD90>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 18:23:51,867:INFO:Checking exceptions
2023-08-03 18:23:51,867:INFO:Importing libraries
2023-08-03 18:23:51,867:INFO:Copying training dataset
2023-08-03 18:23:51,881:INFO:Defining folds
2023-08-03 18:23:51,882:INFO:Declaring metric variables
2023-08-03 18:23:51,888:INFO:Importing untrained model
2023-08-03 18:23:51,895:INFO:Orthogonal Matching Pursuit Imported successfully
2023-08-03 18:23:51,911:INFO:Starting cross validation
2023-08-03 18:23:51,913:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 18:23:52,000:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 18:23:52,012:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 18:23:52,026:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 18:23:52,044:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 18:23:52,061:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 18:23:52,072:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 18:23:52,084:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 18:23:52,107:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 18:23:52,125:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 18:23:52,136:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-08-03 18:23:53,243:INFO:Calculating mean and std
2023-08-03 18:23:53,247:INFO:Creating metrics dataframe
2023-08-03 18:23:53,457:INFO:Uploading results into container
2023-08-03 18:23:53,458:INFO:Uploading model into container now
2023-08-03 18:23:53,459:INFO:_master_model_container: 7
2023-08-03 18:23:53,459:INFO:_display_container: 2
2023-08-03 18:23:53,459:INFO:OrthogonalMatchingPursuit()
2023-08-03 18:23:53,459:INFO:create_model() successfully completed......................................
2023-08-03 18:23:53,543:INFO:SubProcess create_model() end ==================================
2023-08-03 18:23:53,543:INFO:Creating metrics dataframe
2023-08-03 18:23:53,561:INFO:Initializing Bayesian Ridge
2023-08-03 18:23:53,569:INFO:Total runtime is 0.2745270053545634 minutes
2023-08-03 18:23:53,573:INFO:SubProcess create_model() called ==================================
2023-08-03 18:23:53,574:INFO:Initializing create_model()
2023-08-03 18:23:53,574:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3E7E2CA0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A440FAD90>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 18:23:53,574:INFO:Checking exceptions
2023-08-03 18:23:53,574:INFO:Importing libraries
2023-08-03 18:23:53,574:INFO:Copying training dataset
2023-08-03 18:23:53,584:INFO:Defining folds
2023-08-03 18:23:53,584:INFO:Declaring metric variables
2023-08-03 18:23:53,590:INFO:Importing untrained model
2023-08-03 18:23:53,596:INFO:Bayesian Ridge Imported successfully
2023-08-03 18:23:53,605:INFO:Starting cross validation
2023-08-03 18:23:53,607:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 18:23:54,968:INFO:Calculating mean and std
2023-08-03 18:23:54,971:INFO:Creating metrics dataframe
2023-08-03 18:23:55,152:INFO:Uploading results into container
2023-08-03 18:23:55,153:INFO:Uploading model into container now
2023-08-03 18:23:55,154:INFO:_master_model_container: 8
2023-08-03 18:23:55,154:INFO:_display_container: 2
2023-08-03 18:23:55,154:INFO:BayesianRidge()
2023-08-03 18:23:55,154:INFO:create_model() successfully completed......................................
2023-08-03 18:23:55,245:INFO:SubProcess create_model() end ==================================
2023-08-03 18:23:55,245:INFO:Creating metrics dataframe
2023-08-03 18:23:55,264:INFO:Initializing Passive Aggressive Regressor
2023-08-03 18:23:55,264:INFO:Total runtime is 0.3027880390485128 minutes
2023-08-03 18:23:55,271:INFO:SubProcess create_model() called ==================================
2023-08-03 18:23:55,272:INFO:Initializing create_model()
2023-08-03 18:23:55,272:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3E7E2CA0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A440FAD90>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 18:23:55,272:INFO:Checking exceptions
2023-08-03 18:23:55,272:INFO:Importing libraries
2023-08-03 18:23:55,272:INFO:Copying training dataset
2023-08-03 18:23:55,289:INFO:Defining folds
2023-08-03 18:23:55,289:INFO:Declaring metric variables
2023-08-03 18:23:55,297:INFO:Importing untrained model
2023-08-03 18:23:55,307:INFO:Passive Aggressive Regressor Imported successfully
2023-08-03 18:23:55,323:INFO:Starting cross validation
2023-08-03 18:23:55,325:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 18:23:56,697:INFO:Calculating mean and std
2023-08-03 18:23:56,700:INFO:Creating metrics dataframe
2023-08-03 18:23:56,954:INFO:Uploading results into container
2023-08-03 18:23:56,955:INFO:Uploading model into container now
2023-08-03 18:23:56,956:INFO:_master_model_container: 9
2023-08-03 18:23:56,956:INFO:_display_container: 2
2023-08-03 18:23:56,957:INFO:PassiveAggressiveRegressor(random_state=1071)
2023-08-03 18:23:56,957:INFO:create_model() successfully completed......................................
2023-08-03 18:23:57,044:INFO:SubProcess create_model() end ==================================
2023-08-03 18:23:57,044:INFO:Creating metrics dataframe
2023-08-03 18:23:57,073:INFO:Initializing Huber Regressor
2023-08-03 18:23:57,074:INFO:Total runtime is 0.3329453269640605 minutes
2023-08-03 18:23:57,082:INFO:SubProcess create_model() called ==================================
2023-08-03 18:23:57,082:INFO:Initializing create_model()
2023-08-03 18:23:57,083:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3E7E2CA0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A440FAD90>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 18:23:57,083:INFO:Checking exceptions
2023-08-03 18:23:57,083:INFO:Importing libraries
2023-08-03 18:23:57,084:INFO:Copying training dataset
2023-08-03 18:23:57,099:INFO:Defining folds
2023-08-03 18:23:57,099:INFO:Declaring metric variables
2023-08-03 18:23:57,106:INFO:Importing untrained model
2023-08-03 18:23:57,113:INFO:Huber Regressor Imported successfully
2023-08-03 18:23:57,127:INFO:Starting cross validation
2023-08-03 18:23:57,128:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 18:23:57,704:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 18:23:57,752:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 18:23:57,794:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 18:23:57,817:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 18:23:57,828:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 18:23:57,835:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 18:23:57,870:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 18:23:57,902:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 18:23:57,915:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 18:23:57,973:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-08-03 18:23:59,153:INFO:Calculating mean and std
2023-08-03 18:23:59,156:INFO:Creating metrics dataframe
2023-08-03 18:23:59,403:INFO:Uploading results into container
2023-08-03 18:23:59,404:INFO:Uploading model into container now
2023-08-03 18:23:59,405:INFO:_master_model_container: 10
2023-08-03 18:23:59,405:INFO:_display_container: 2
2023-08-03 18:23:59,406:INFO:HuberRegressor()
2023-08-03 18:23:59,406:INFO:create_model() successfully completed......................................
2023-08-03 18:23:59,494:INFO:SubProcess create_model() end ==================================
2023-08-03 18:23:59,495:INFO:Creating metrics dataframe
2023-08-03 18:23:59,515:INFO:Initializing K Neighbors Regressor
2023-08-03 18:23:59,515:INFO:Total runtime is 0.3736385027567546 minutes
2023-08-03 18:23:59,520:INFO:SubProcess create_model() called ==================================
2023-08-03 18:23:59,520:INFO:Initializing create_model()
2023-08-03 18:23:59,520:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3E7E2CA0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A440FAD90>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 18:23:59,520:INFO:Checking exceptions
2023-08-03 18:23:59,520:INFO:Importing libraries
2023-08-03 18:23:59,520:INFO:Copying training dataset
2023-08-03 18:23:59,531:INFO:Defining folds
2023-08-03 18:23:59,531:INFO:Declaring metric variables
2023-08-03 18:23:59,536:INFO:Importing untrained model
2023-08-03 18:23:59,541:INFO:K Neighbors Regressor Imported successfully
2023-08-03 18:23:59,551:INFO:Starting cross validation
2023-08-03 18:23:59,552:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 18:24:02,050:INFO:Calculating mean and std
2023-08-03 18:24:02,054:INFO:Creating metrics dataframe
2023-08-03 18:24:02,325:INFO:Uploading results into container
2023-08-03 18:24:02,326:INFO:Uploading model into container now
2023-08-03 18:24:02,327:INFO:_master_model_container: 11
2023-08-03 18:24:02,327:INFO:_display_container: 2
2023-08-03 18:24:02,328:INFO:KNeighborsRegressor(n_jobs=-1)
2023-08-03 18:24:02,329:INFO:create_model() successfully completed......................................
2023-08-03 18:24:02,419:INFO:SubProcess create_model() end ==================================
2023-08-03 18:24:02,420:INFO:Creating metrics dataframe
2023-08-03 18:24:02,441:INFO:Initializing Decision Tree Regressor
2023-08-03 18:24:02,441:INFO:Total runtime is 0.42239541610081993 minutes
2023-08-03 18:24:02,447:INFO:SubProcess create_model() called ==================================
2023-08-03 18:24:02,447:INFO:Initializing create_model()
2023-08-03 18:24:02,447:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3E7E2CA0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A440FAD90>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 18:24:02,448:INFO:Checking exceptions
2023-08-03 18:24:02,448:INFO:Importing libraries
2023-08-03 18:24:02,448:INFO:Copying training dataset
2023-08-03 18:24:02,459:INFO:Defining folds
2023-08-03 18:24:02,460:INFO:Declaring metric variables
2023-08-03 18:24:02,466:INFO:Importing untrained model
2023-08-03 18:24:02,472:INFO:Decision Tree Regressor Imported successfully
2023-08-03 18:24:02,481:INFO:Starting cross validation
2023-08-03 18:24:02,482:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 18:24:03,902:INFO:Calculating mean and std
2023-08-03 18:24:03,904:INFO:Creating metrics dataframe
2023-08-03 18:24:04,053:INFO:Uploading results into container
2023-08-03 18:24:04,055:INFO:Uploading model into container now
2023-08-03 18:24:04,056:INFO:_master_model_container: 12
2023-08-03 18:24:04,056:INFO:_display_container: 2
2023-08-03 18:24:04,057:INFO:DecisionTreeRegressor(random_state=1071)
2023-08-03 18:24:04,057:INFO:create_model() successfully completed......................................
2023-08-03 18:24:04,128:INFO:SubProcess create_model() end ==================================
2023-08-03 18:24:04,128:INFO:Creating metrics dataframe
2023-08-03 18:24:04,142:INFO:Initializing Random Forest Regressor
2023-08-03 18:24:04,143:INFO:Total runtime is 0.45077189604441326 minutes
2023-08-03 18:24:04,147:INFO:SubProcess create_model() called ==================================
2023-08-03 18:24:04,148:INFO:Initializing create_model()
2023-08-03 18:24:04,148:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3E7E2CA0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A440FAD90>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 18:24:04,148:INFO:Checking exceptions
2023-08-03 18:24:04,149:INFO:Importing libraries
2023-08-03 18:24:04,149:INFO:Copying training dataset
2023-08-03 18:24:04,163:INFO:Defining folds
2023-08-03 18:24:04,164:INFO:Declaring metric variables
2023-08-03 18:24:04,171:INFO:Importing untrained model
2023-08-03 18:24:04,176:INFO:Random Forest Regressor Imported successfully
2023-08-03 18:24:04,182:INFO:Starting cross validation
2023-08-03 18:24:04,183:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 18:24:16,128:INFO:Calculating mean and std
2023-08-03 18:24:16,129:INFO:Creating metrics dataframe
2023-08-03 18:24:16,293:INFO:Uploading results into container
2023-08-03 18:24:16,294:INFO:Uploading model into container now
2023-08-03 18:24:16,294:INFO:_master_model_container: 13
2023-08-03 18:24:16,294:INFO:_display_container: 2
2023-08-03 18:24:16,296:INFO:RandomForestRegressor(n_jobs=-1, random_state=1071)
2023-08-03 18:24:16,296:INFO:create_model() successfully completed......................................
2023-08-03 18:24:16,366:INFO:SubProcess create_model() end ==================================
2023-08-03 18:24:16,366:INFO:Creating metrics dataframe
2023-08-03 18:24:16,384:INFO:Initializing Extra Trees Regressor
2023-08-03 18:24:16,384:INFO:Total runtime is 0.6547778526941935 minutes
2023-08-03 18:24:16,388:INFO:SubProcess create_model() called ==================================
2023-08-03 18:24:16,388:INFO:Initializing create_model()
2023-08-03 18:24:16,389:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3E7E2CA0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A440FAD90>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 18:24:16,389:INFO:Checking exceptions
2023-08-03 18:24:16,389:INFO:Importing libraries
2023-08-03 18:24:16,389:INFO:Copying training dataset
2023-08-03 18:24:16,396:INFO:Defining folds
2023-08-03 18:24:16,396:INFO:Declaring metric variables
2023-08-03 18:24:16,400:INFO:Importing untrained model
2023-08-03 18:24:16,403:INFO:Extra Trees Regressor Imported successfully
2023-08-03 18:24:16,410:INFO:Starting cross validation
2023-08-03 18:24:16,411:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 18:24:22,544:WARNING:C:\Users\patta\AppData\Roaming\Python\Python39\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.51s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-08-03 18:24:22,671:WARNING:C:\Users\patta\AppData\Roaming\Python\Python39\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.92s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-08-03 18:24:24,634:INFO:Calculating mean and std
2023-08-03 18:24:24,637:INFO:Creating metrics dataframe
2023-08-03 18:24:24,899:INFO:Uploading results into container
2023-08-03 18:24:24,900:INFO:Uploading model into container now
2023-08-03 18:24:24,900:INFO:_master_model_container: 14
2023-08-03 18:24:24,900:INFO:_display_container: 2
2023-08-03 18:24:24,901:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=1071)
2023-08-03 18:24:24,901:INFO:create_model() successfully completed......................................
2023-08-03 18:24:24,989:INFO:SubProcess create_model() end ==================================
2023-08-03 18:24:24,989:INFO:Creating metrics dataframe
2023-08-03 18:24:25,010:INFO:Initializing AdaBoost Regressor
2023-08-03 18:24:25,010:INFO:Total runtime is 0.7985539754231771 minutes
2023-08-03 18:24:25,016:INFO:SubProcess create_model() called ==================================
2023-08-03 18:24:25,016:INFO:Initializing create_model()
2023-08-03 18:24:25,016:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3E7E2CA0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A440FAD90>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 18:24:25,017:INFO:Checking exceptions
2023-08-03 18:24:25,017:INFO:Importing libraries
2023-08-03 18:24:25,017:INFO:Copying training dataset
2023-08-03 18:24:25,032:INFO:Defining folds
2023-08-03 18:24:25,033:INFO:Declaring metric variables
2023-08-03 18:24:25,041:INFO:Importing untrained model
2023-08-03 18:24:25,049:INFO:AdaBoost Regressor Imported successfully
2023-08-03 18:24:25,064:INFO:Starting cross validation
2023-08-03 18:24:25,066:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 18:24:27,610:INFO:Calculating mean and std
2023-08-03 18:24:27,612:INFO:Creating metrics dataframe
2023-08-03 18:24:27,879:INFO:Uploading results into container
2023-08-03 18:24:27,880:INFO:Uploading model into container now
2023-08-03 18:24:27,882:INFO:_master_model_container: 15
2023-08-03 18:24:27,882:INFO:_display_container: 2
2023-08-03 18:24:27,882:INFO:AdaBoostRegressor(random_state=1071)
2023-08-03 18:24:27,882:INFO:create_model() successfully completed......................................
2023-08-03 18:24:27,971:INFO:SubProcess create_model() end ==================================
2023-08-03 18:24:27,972:INFO:Creating metrics dataframe
2023-08-03 18:24:27,992:INFO:Initializing Gradient Boosting Regressor
2023-08-03 18:24:27,993:INFO:Total runtime is 0.8482635339101156 minutes
2023-08-03 18:24:27,997:INFO:SubProcess create_model() called ==================================
2023-08-03 18:24:27,998:INFO:Initializing create_model()
2023-08-03 18:24:27,998:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3E7E2CA0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A440FAD90>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 18:24:27,998:INFO:Checking exceptions
2023-08-03 18:24:27,998:INFO:Importing libraries
2023-08-03 18:24:27,998:INFO:Copying training dataset
2023-08-03 18:24:28,009:INFO:Defining folds
2023-08-03 18:24:28,009:INFO:Declaring metric variables
2023-08-03 18:24:28,014:INFO:Importing untrained model
2023-08-03 18:24:28,019:INFO:Gradient Boosting Regressor Imported successfully
2023-08-03 18:24:28,029:INFO:Starting cross validation
2023-08-03 18:24:28,030:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 18:24:32,026:INFO:Calculating mean and std
2023-08-03 18:24:32,028:INFO:Creating metrics dataframe
2023-08-03 18:24:32,317:INFO:Uploading results into container
2023-08-03 18:24:32,318:INFO:Uploading model into container now
2023-08-03 18:24:32,319:INFO:_master_model_container: 16
2023-08-03 18:24:32,319:INFO:_display_container: 2
2023-08-03 18:24:32,319:INFO:GradientBoostingRegressor(random_state=1071)
2023-08-03 18:24:32,319:INFO:create_model() successfully completed......................................
2023-08-03 18:24:32,409:INFO:SubProcess create_model() end ==================================
2023-08-03 18:24:32,410:INFO:Creating metrics dataframe
2023-08-03 18:24:32,430:INFO:Initializing Extreme Gradient Boosting
2023-08-03 18:24:32,430:INFO:Total runtime is 0.9222229878107706 minutes
2023-08-03 18:24:32,437:INFO:SubProcess create_model() called ==================================
2023-08-03 18:24:32,437:INFO:Initializing create_model()
2023-08-03 18:24:32,438:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3E7E2CA0>, estimator=xgboost, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A440FAD90>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 18:24:32,438:INFO:Checking exceptions
2023-08-03 18:24:32,438:INFO:Importing libraries
2023-08-03 18:24:32,438:INFO:Copying training dataset
2023-08-03 18:24:32,454:INFO:Defining folds
2023-08-03 18:24:32,454:INFO:Declaring metric variables
2023-08-03 18:24:32,461:INFO:Importing untrained model
2023-08-03 18:24:32,467:INFO:Extreme Gradient Boosting Imported successfully
2023-08-03 18:24:32,480:INFO:Starting cross validation
2023-08-03 18:24:32,481:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 18:24:36,044:INFO:Calculating mean and std
2023-08-03 18:24:36,047:INFO:Creating metrics dataframe
2023-08-03 18:24:36,330:INFO:Uploading results into container
2023-08-03 18:24:36,331:INFO:Uploading model into container now
2023-08-03 18:24:36,332:INFO:_master_model_container: 17
2023-08-03 18:24:36,332:INFO:_display_container: 2
2023-08-03 18:24:36,333:INFO:XGBRegressor(base_score=None, booster='gbtree', callbacks=None,
             colsample_bylevel=None, colsample_bynode=None,
             colsample_bytree=None, early_stopping_rounds=None,
             enable_categorical=False, eval_metric=None, feature_types=None,
             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
             interaction_constraints=None, learning_rate=None, max_bin=None,
             max_cat_threshold=None, max_cat_to_onehot=None,
             max_delta_step=None, max_depth=None, max_leaves=None,
             min_child_weight=None, missing=nan, monotone_constraints=None,
             n_estimators=100, n_jobs=-1, num_parallel_tree=None,
             predictor=None, random_state=1071, ...)
2023-08-03 18:24:36,333:INFO:create_model() successfully completed......................................
2023-08-03 18:24:36,421:INFO:SubProcess create_model() end ==================================
2023-08-03 18:24:36,421:INFO:Creating metrics dataframe
2023-08-03 18:24:36,443:INFO:Initializing Light Gradient Boosting Machine
2023-08-03 18:24:36,443:INFO:Total runtime is 0.9890936175982157 minutes
2023-08-03 18:24:36,449:INFO:SubProcess create_model() called ==================================
2023-08-03 18:24:36,449:INFO:Initializing create_model()
2023-08-03 18:24:36,449:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3E7E2CA0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A440FAD90>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 18:24:36,449:INFO:Checking exceptions
2023-08-03 18:24:36,449:INFO:Importing libraries
2023-08-03 18:24:36,449:INFO:Copying training dataset
2023-08-03 18:24:36,462:INFO:Defining folds
2023-08-03 18:24:36,462:INFO:Declaring metric variables
2023-08-03 18:24:36,470:INFO:Importing untrained model
2023-08-03 18:24:36,478:INFO:Light Gradient Boosting Machine Imported successfully
2023-08-03 18:24:36,493:INFO:Starting cross validation
2023-08-03 18:24:36,495:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 18:24:45,950:INFO:Calculating mean and std
2023-08-03 18:24:45,953:INFO:Creating metrics dataframe
2023-08-03 18:24:46,251:INFO:Uploading results into container
2023-08-03 18:24:46,252:INFO:Uploading model into container now
2023-08-03 18:24:46,253:INFO:_master_model_container: 18
2023-08-03 18:24:46,253:INFO:_display_container: 2
2023-08-03 18:24:46,254:INFO:LGBMRegressor(n_jobs=-1, random_state=1071)
2023-08-03 18:24:46,254:INFO:create_model() successfully completed......................................
2023-08-03 18:24:46,346:INFO:SubProcess create_model() end ==================================
2023-08-03 18:24:46,346:INFO:Creating metrics dataframe
2023-08-03 18:24:46,370:INFO:Initializing Dummy Regressor
2023-08-03 18:24:46,370:INFO:Total runtime is 1.154545259475708 minutes
2023-08-03 18:24:46,377:INFO:SubProcess create_model() called ==================================
2023-08-03 18:24:46,378:INFO:Initializing create_model()
2023-08-03 18:24:46,378:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3E7E2CA0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020A440FAD90>, model_only=True, return_train_score=False, kwargs={})
2023-08-03 18:24:46,379:INFO:Checking exceptions
2023-08-03 18:24:46,379:INFO:Importing libraries
2023-08-03 18:24:46,379:INFO:Copying training dataset
2023-08-03 18:24:46,394:INFO:Defining folds
2023-08-03 18:24:46,394:INFO:Declaring metric variables
2023-08-03 18:24:46,401:INFO:Importing untrained model
2023-08-03 18:24:46,407:INFO:Dummy Regressor Imported successfully
2023-08-03 18:24:46,419:INFO:Starting cross validation
2023-08-03 18:24:46,421:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-08-03 18:24:48,222:INFO:Calculating mean and std
2023-08-03 18:24:48,225:INFO:Creating metrics dataframe
2023-08-03 18:24:48,538:INFO:Uploading results into container
2023-08-03 18:24:48,539:INFO:Uploading model into container now
2023-08-03 18:24:48,540:INFO:_master_model_container: 19
2023-08-03 18:24:48,540:INFO:_display_container: 2
2023-08-03 18:24:48,540:INFO:DummyRegressor()
2023-08-03 18:24:48,540:INFO:create_model() successfully completed......................................
2023-08-03 18:24:48,628:INFO:SubProcess create_model() end ==================================
2023-08-03 18:24:48,628:INFO:Creating metrics dataframe
2023-08-03 18:24:48,671:INFO:Initializing create_model()
2023-08-03 18:24:48,672:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020A3E7E2CA0>, estimator=GradientBoostingRegressor(random_state=1071), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-08-03 18:24:48,672:INFO:Checking exceptions
2023-08-03 18:24:48,676:INFO:Importing libraries
2023-08-03 18:24:48,676:INFO:Copying training dataset
2023-08-03 18:24:48,689:INFO:Defining folds
2023-08-03 18:24:48,690:INFO:Declaring metric variables
2023-08-03 18:24:48,690:INFO:Importing untrained model
2023-08-03 18:24:48,690:INFO:Declaring custom model
2023-08-03 18:24:48,691:INFO:Gradient Boosting Regressor Imported successfully
2023-08-03 18:24:48,692:INFO:Cross validation set to False
2023-08-03 18:24:48,692:INFO:Fitting Model
2023-08-03 18:24:50,759:INFO:GradientBoostingRegressor(random_state=1071)
2023-08-03 18:24:50,759:INFO:create_model() successfully completed......................................
2023-08-03 18:24:50,911:INFO:_master_model_container: 19
2023-08-03 18:24:50,912:INFO:_display_container: 2
2023-08-03 18:24:50,912:INFO:GradientBoostingRegressor(random_state=1071)
2023-08-03 18:24:50,912:INFO:compare_models() successfully completed......................................
